% This file was created with JabRef 2.7.2.
% Encoding: ISO8859_15

@INBOOK{sanchez2010,
  chapter = {Model Driven Engineering Languages and Systems},
  pages = {766-781},
  title = {Aspect-Oriented Model Weaving Beyond Model Composition and Model
	Transformation},
  publisher = {Springer Berlin / Heidelberg},
  year = {2010},
  editor = {Springer},
  author = {Pablo Sánchez and Lidia Fuentes and Dominik Stein and Stefan Hanenberg
	and Rainer Unland},
  volume = {5301/2010},
  series = {Lecture Notes in Computer Science},
  month = {September},
  abstract = {Research in Aspect-Oriented Software Development (AOSD) has brought
	up powerful abstractions in order to specify under which conditions
	an aspect affects the base software. So far, Model-Driven Development
	(MDD) approaches to AOSD have mostly concentrated on the weaving
	process and, as a result, they have come up with manifold ways to
	compose aspect models and base models. All too often, however, the
	approaches disregard the benefits that the aspect-oriented abstractions
	can bring to software development, though. This paper discusses the
	implications that such negligence has on the specification of aspect-oriented
	models in MDD. Furthermore, it presents a weaver that is able to
	cope with sophisticated join point selection abstractions, as they
	are known from many aspect-oriented programming languages, and which
	go far beyond the selection capabilities provided by current model
	weavers. By means of this weaver, models can realize both a higher
	separation of concerns as well as a higher level of abstraction.
	
	
	This work has been partially supported by MCYT Project TIN2005-09405-C02-01
	and EC Grants IST-2-004349-NOE AOSD and IST-033710 AMPLE.},
  comment = {activity diagram, class diagram},
  crossref = {0302-9743 (Print) 1611-3349 (Online)},
  doi = {10.1007/978-3-540-87875-9},
  file = {:./process/interesse/activity diagram/sanchez2.pdf:PDF},
  isbn = {978-3-540-87874-2},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05},
  url = {http://www.springerlink.com/content/88460410g27441j4/}
}

@INPROCEEDINGS{2008,
  author = {Fang Yi-qiu and Tang Rong and Ge Jun-wei},
  title = {Use-Case Based Aspect-Oriented Architecture Description Model},
  booktitle = {Proc. Advanced Software Engineering and Its Applications ASEA 2008},
  year = {2008},
  pages = {206--209},
  abstract = {The architectural description and design decide the quality and life
	of the software. Cross-cutting concerns as aspects crosscut multiple
	architectural components. Due to these cross-cutting concerns the
	metrics for cohesion and coupling are affected, the scenario result
	in lower values for modifiability and reuse quality attributes. Accordingly,
	the concept of aspect orientation is required to be addressed in
	architecture design level. But now a lot of methods about architectural
	description fail to accommodate the description for cross-cutting
	concerns. In this paper, on the based of standard for ldquoRecommended
	practice for architectural description of software-intensive systemrdquo
	in IEEE 1471-2000, we propose the Use-Case Based Aspect-Oriented
	Conceptual Model for Architecture Description to explicitly address
	aspects in architecture design. It is more favorable to maintain,
	reuse and evolve software system. And we applied this model into
	Web Service, shaped Aspect-Oriented Extension Architecture Description
	Model for Web Services to show the advantages of this approach.},
  comment = {use case},
  doi = {10.1109/ASEA.2008.15},
  file = {:./process/interesse/requirements usecase/4721343.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{2009,
  author = {Ge Jun-wei and Tang Rong and Fang Yi-qiu},
  title = {Use-Case Based Aspect-Oriented Architecture Description Model},
  booktitle = {Proc. WRI World Congress Software Engineering WCSE '09},
  year = {2009},
  volume = {3},
  pages = {301--304},
  abstract = {The architectural description and design decide the quality and life
	of the software. Cross-cutting concerns as aspects crosscut multiple
	architectural components. Due to these cross-cutting concerns the
	metrics for cohesion and coupling are affected, the scenario result
	in lower values for modifiability and reuse quality attributes. Accordingly,
	the concept of aspect-orientation is required to be addressed in
	architecture design level. But now a lot of methods about architectural
	description fail to accommodate the description for cross-cutting
	concerns. In this paper, on the based of standard for "Recommended
	practice for architectural description of software-intensive system"
	in IEEE 1471-2000, we propose the Use-Case Based Aspect-Oriented
	Conceptual Model for bArchitecture Description to explicitly address
	aspects in architecture design. It is more favorable to maintain,
	reuse and evolve software system. And we applied this model into
	Web Service, shaped Aspect-Oriented Extension Architecture Description
	Model for Web Services to show the advantages of this approach.},
  doi = {10.1109/WCSE.2009.65},
  file = {:./process/interesse/requirements usecase/5319414.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@MISC{magicdraw,
  author = {No~Magic~inc.},
  title = {MagicDraw},
  howpublished = {http://www.magicdraw.com/},
  month = {November},
  year = {2010},
  owner = {Thiago Gottardi},
  timestamp = {2010.11.17}
}

@MISC{gnur,
  author = {\nothing{Free~Software~Foundation, Inc.}},
  title = {R},
  howpublished = {http://www.r-project.org/},
  month = {December},
  year = {2011},
  owner = {Thiago Gottardi},
  timestamp = {2012.01.27}
}

@INPROCEEDINGS{Alam2009,
  author = {Alam, Farhana Eva and Evermann, Joerg and Fiech, Adrian},
  title = {Modeling for dynamic aspect-oriented development},
  booktitle = {C3S2E '09: Proceedings of the 2nd Canadian Conference on Computer
	Science and Software Engineering},
  year = {2009},
  pages = {143--147},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Aspect Oriented Software Development (AOSD) has its roots in the need
	to deal with requirements that cut across the primary modularization
	of a software system. On the programming level, mature, industrial-strength
	tools like the de-facto standard AspectJ exist. However, on the modeling
	level, there is as yet little support for AOSD. Building on previous
	work, this paper develops \textsc{UML} modeling support for dynamic
	AOSD, using standard \textsc{UML} extension mechanisms. We present
	a generic profile that allows existing \textsc{UML} tools to express
	AOSD models. We also provide automatic code generation into AspectS,
	an aspect extension to Smalltalk, and AspectML, an aspect oriented
	flavor of the ML language. Examples throughout the paper illustrate
	our approach.},
  comment = {class diagram, metamodel, model weaving},
  doi = {http://doi.acm.org/10.1145/1557626.1557649},
  file = {:./process/interesse/class diagrams/p143-alam.pdf:PDF},
  isbn = {978-1-60558-401-0},
  keywords = {Aspect-oriented programming, aspect-oriented modeling, dynamic
	
	AOP},
  location = {Montreal, Quebec, Canada},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{aldawud03,
  author = {Aldawud, O. and Elrad, T.and Bader, A},
  title = {\textsc{UML} profile for aspect-oriented software development},
  booktitle = {Proceedings of the AOM workshop at AOSD 2003},
  year = {2003},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.21}
}

@INPROCEEDINGS{aldawud01,
  author = {Aldawud, O. and Elrad, T.and Bader, A},
  title = {\textsc{UML} profile for aspect-oriented software modeling},
  booktitle = {Proceedings of OOPSLA 2001},
  year = {2001},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.21}
}

@INPROCEEDINGS{Barbosa05mdaand,
  author = {Amaya, Pablo A. Barbosa and González, Carlos F. Contreras and Murillo,
	Juan M. Rodriguez},
  title = {MDA and Separation of Aspects: An Approach based on Multiple Views
	and Subject Oriented Design},
  booktitle = {Proc. of 6 th Intl. Workshop on Aspect Oriented Modeling},
  year = {2005},
  abstract = {MDA specification of the OMG proposes to model a system using three
	different and independent levels of abstraction. This supposes an
	improvement in the development of large complex systems. But the
	lack of a specific mechanism for the separation of crosscutting concerns
	within MDA levels significantly diminished the traceability and evolution
	promised by this approach. In this work an approach to deal with
	aspect oriented modeling in MDA is presented. In our approach, typical
	crosscutting concerns such as security, real time constraints, replication,
	etc. are considered as different perspectives of the system handled
	by different stakeholders. Such different perspectives will be separately
	modeled using \textsc{UML}. This separation will keep from CIM to
	PSM. In addition, we propose to model the system requirements with
	Use Cases and design them with Composition Patterns and Subject-Oriented
	Design in \textsc{UML} in order to improve the traceability, reusability
	and evolution in this kind of systems.},
  citeseerurl = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.155.1953},
  comment = {class diagram, model weaving, use case},
  doi = {10.1.1.155.1953},
  file = {:./process/interesse/class diagrams/Amaya.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{aspecth,
  author = {Andrade, C.A.R. and Santos, A.L.M. and Borba, P.H.M..},
  title = {Aspect\textsc{H}: Uma Extensão Orientada a Aspectos de Haskell},
  booktitle = {WASP' 04 - workshop do 18º SBES . Brasília, Brasil.},
  year = {2004},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.22}
}

@INPROCEEDINGS{1404951,
  author = {Anthonysamy, Pauline and Som\'{e}, St\'{e}phane S.},
  title = {Aspect-oriented use case modeling for software product lines},
  booktitle = {EA '08: Proceedings of the 2008 AOSD workshop on Early aspects},
  year = {2008},
  pages = {1--8},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Software Product Line Development advocates software reuse by modeling
	common and variable artefacts separately across members of a family
	of products. Aspect-Oriented Software Development aims at separation
	of concerns with "aspects" to increase modularity, reusability, maintainability
	and ease of evolution. In this paper, we apply an aspect-oriented
	use case modeling approach to product line system modeling. A use
	case specification captures stakeholders concerns as interactions
	between a system and its actors. We adapt our previous work with
	the introduction of a «variability» relationship for the expression
	of variabilities. This relationship is used to model variable and
	common behaviours across a family of products as use cases. A variability
	composition mechanism enables building of executable behaviour models
	for each member of a product line family by integrating common elements
	with the applicable variable elements.},
  comment = {activity diagram, model weaving, product lines, use case},
  doi = {http://doi.acm.org/10.1145/1404946.1404951},
  file = {:./process/interesse/product line/a5-anthonysamy.pdf:PDF},
  isbn = {978-1-60558-143-9},
  location = {Brussels, Belgium},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{Apel2008,
  author = {Apel, Sven and K\"{a}stner, Christian and Batory, Don},
  title = {Program refactoring using functional aspects},
  booktitle = {GPCE '08: Proceedings of the 7th international conference on Generative
	programming and component engineering},
  year = {2008},
  pages = {161--170},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {A functional aspect is an aspect that has the semantics of a transformation;
	it is a function that maps a program to an advised program. Functional
	aspects are composed by function composition. In this paper, we explore
	functional aspects in the context of aspect-oriented refactoring.
	We show that refactoring legacy applications using functional aspects
	is just as flexible and expressive as traditional aspects (functional
	aspects can be refactored in any order), while having a simpler semantics
	(aspect composition is just function composition), and causes fewer
	undesirable interactions between aspects (the number of potential
	interactions between functional aspects is half the number of potential
	interactions between traditional aspects). We analyze several aspect-oriented
	programs of different sizes to support our claims.},
  comment = {metrics, reverse refactor},
  doi = {http://doi.acm.org/10.1145/1449913.1449938},
  file = {:./process/interesse/metrics-complexity/p161-apel.pdf:PDF},
  isbn = {978-1-60558-267-2},
  location = {Nashville, TN, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{cizar,
  author = {4.I. Aracic and V. Gasiunas and M. Mezini and K.Ostermann.},
  title = {Overview of \textsc{C}aesar\textsc{J}.},
  booktitle = {Transactions on Aspect-Oriented Software Development I. LNCS, Vol.
	3880, pp. 135 - 173, Feb 2006.},
  year = {2006},
  owner = {Lab Valter 2},
  timestamp = {2010.08.27}
}

@INPROCEEDINGS{amfibia,
  author = {Björn Axenath and Ekkart Kindler and Vladimir Rubin},
  title = {AMFIBIA: A Meta-Model for the Integration of Business Process Modelling
	Aspects},
  booktitle = {In: The Role of Business Processes in Service Oriented Architectures.
	Number 06291 in Dagstuhl Seminar Proceedings (2006},
  year = {2006},
  abstract = {AMFIBIA is a meta-model that formalizes the essential aspects and
	concepts of business process modelling. Though AMFIBIA is not the
	first approach to formalizing the aspects and concepts of business
	process modelling, it is more ambitious in the following respects:
	First, it is independent from particular modelling formalisms of
	business processes and it is designed in such a way that any formalisms
	for modelling some aspect of a business process can be plugged into
	AM-FIBIA. Therefore, AMFIBIA is formalism-independent. Second it
	is not biased toward any aspect of business process and the different
	aspects can be, basically, considered and modelled independently
	of each other. Moreover, it is not restricted to a fixed set of aspects;
	further aspects of business processes can be easily integrated. Third,
	AMFIBIA does not only name and relate the concepts of business process
	modelling, as it is typically done in ontologies or architectures
	for business process modelling. Rather, AMFIBIA also captures the
	interaction among the different aspects and concepts, and therefore
	fully defines the dynamic behaviour of a business process model,
	with its different aspects modelled in different notations. To prove
	this claim, we implemented a prototype of a formalism-independent
	workflow engine based on AMFIBIA: This workflow engine, also called
	AMFIBIA, is open for new aspects of business process modelling and
	new modelling formalisms can be added to it. In this paper, we will
	present AMFIBIA and the prototype workflow engine based on this meta-model
	and discuss the principles and concepts of its design.},
  citeseerurl = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.87.3338},
  comment = {formal,metamodel},
  file = {:./process/interesse/formal specifications/X10.1.1.87.3338.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.08}
}

@ARTICLE{Babu2009,
  author = {Babu, Chitra and Krishnan, Harshini Ramnath},
  title = {Fault model and test-case generation for the composition of aspects},
  journal = {SIGSOFT Softw. Eng. Notes},
  year = {2009},
  volume = {34},
  pages = {1--6},
  number = {1},
  abstract = {Aspect-Oriented Programming (AOP) is an emerging paradigm that enhances
	the modularity of Object-Oriented Programming (OOP) by eliminating
	tangling and scattering in the code. The scattering code is encapsulated
	within a module called an Aspect. A join point is an execution point
	in a program. When there is more than one aspect sharing the same
	join point then it becomes necessary to identify the faults that
	occur during their composition. A Fault model is instrumental in
	identifying the faults that can occur in any software system. Research
	works so far have focused on the composition of Aspects only from
	the implementation standpoint. It is necessary to identify these
	faults during the design process, early in the software development
	lifecycle. This would help in adopting better coding strategies that
	result in modular, reusable and maintainable code. Towards this objective,
	this paper proposes a candidate fault model that identifies the faults
	which occur during Aspect Composition from the design. Use-case scenarios
	and sequence diagrams are used to reflect the design of the system.
	The proposed fault model identifies the faults from the sequence
	diagrams. Test cases are generated from the design using black-box
	testing strategy. The proposed fault model is also applied to an
	illustrative case study and has been validated using test case coverage
	analysis.},
  address = {New York, NY, USA},
  comment = {interaction diagram, use case},
  doi = {http://doi.acm.org/10.1145/1457516.1457521},
  file = {:./process/interesse/interaction diagrams/p30-babu.pdf:PDF},
  issn = {0163-5948},
  owner = {Thiago Gottardi},
  publisher = {ACM},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Bakre2007,
  author = {Bakre, Shubhanan and Elrad, Tzilla},
  title = {Scenario based resolution of aspect interactions with aspect interaction
	charts},
  booktitle = {AOM '07: Proceedings of the 10th international workshop on Aspect-oriented
	modeling},
  year = {2007},
  pages = {1--6},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Introduction of aspects into the system raises the level of separation
	of concerns within the system. At the same time it also raises the
	level of interactions among the various components and features within
	the system. Current modeling techniques(sequence diagrams, live sequence
	charts) are inadequate in handling this added level of interaction.
	A higher level of abstraction is needed in order to capture the interactions
	among aspects/features/core and provides two immediate benefits -
	better modularization of the requirements, and better adaptability
	for the resulting model. We propose the Aspect Interaction Charts
	(AIC) that build on top of the Live Sequence Charts (LSC) [3] in
	order to capture the interactions among various aspects at joinpoints.
	With the AIC we foresee the ability to capture aspect interactions
	at a joinpoint in a common specification in the form of use-case
	scenarios, and the ability to execute these scenarios while non-invasively
	manipulating the interactions among the various aspects. In addition
	to the aforementioned benefits, we plan on leveraging the tools that
	come with the LSC language, i.e. the Play Engine. The AIC would provide
	us with the ability to model, view and manipulate aspect interactions
	at joinpoints.},
  comment = {interaction diagram, model weaving},
  doi = {http://doi.acm.org/10.1145/1229375.1229376},
  file = {:./process/interesse/interaction diagrams/a1-bakre.pdf:PDF},
  isbn = {978-1-59593-658-5},
  location = {Vancouver, Canada},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Balandyte2006,
  author = {Balandyte, M. and Nemuraite, L.},
  title = {Time, event and self-management aspects in model-driven development
	of information systems},
  booktitle = {Proc. 7th Int Databases and Information Systems Baltic Conf},
  year = {2006},
  pages = {151--158},
  abstract = {Cross-cutting concerns, or <span class='snippet'>aspects</span>, are
	parts of the system that <span class='snippet'>in</span> standard
	design mechanisms are scattered across multiple program components,
	<span class='snippet'>and</span> tangled with other components. The
	ideas of separation of cross-cutting concerns, originated from <span
	class='snippet'>aspect</span>-oriented programming (AOP), have gained
	attention <span class='snippet'>in</span> <span class='snippet'>aspect</span>-oriented
	design (AOD) <span class='snippet'>and</span> model-driven development
	(MDD), endeavoring to <span class='snippet'>aspect</span>-oriented
	decomposition <span class='snippet'>and</span> composition at model
	level. This paper focuses on adequate representing of <span class='snippet'>time</span>,
	<span class='snippet'>events</span> <span class='snippet'>and</span>
	<span class='snippet'>management</span> concerns <span class='snippet'>in</span>
	information systems owning behavior inspired by system agents. <span
	class='snippet'>Event</span>-based <span class='snippet'>aspect</span>-oriented
	approach seems to be the most appropriate solution for this situation,
	although it lacks smooth methodology going from requirements to code
	<span class='snippet'>and</span> often is hidden <span class='snippet'>in</span>
	technological level. <span class='snippet'>Time</span> <span class='snippet'>aspect</span>,
	thoroughly analyzed <span class='snippet'>in</span> embedded <span
	class='snippet'>and</span> real-<span class='snippet'>time</span>
	systems, also lacks of proper attention <span class='snippet'>in</span>
	the area of information systems despite it is closely related to
	many information system projects. To fill the gap, the method of
	design independent modeling was extended with concepts <span class='snippet'>and</span>
	techniques for <span class='snippet'>time</span>, <span class='snippet'>event</span>
	<span class='snippet'>and</span> <span class='snippet'>self</span>-<span
	class='snippet'>management</span> <span class='snippet'>aspects</span>
	modeling <span class='snippet'>in</span> model-driven information
	system development},
  comment = {class diagram, use case},
  doi = {10.1109/DBIS.2006.1678490},
  file = {:./process/interesse/class diagrams/1678490.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{theme,
  author = {Baniassad, E. and Clarke, S.},
  title = {Theme: an approach for aspect-oriented analysis and design},
  booktitle = {Proc. 26th Int. Conf. Software Engineering ICSE 2004},
  year = {2004},
  pages = {158--167},
  abstract = {Aspects are behaviours that are tangled and scattered across a system.
	In requirements documentation, aspects manifest themselves as descriptions
	of behaviours that are intertwined, and woven throughout. Some aspects
	may be obvious, as specifications of typical crosscutting behaviour.
	Others may be more subtle, making them hard <span class='snippet'>to</span>
	identify. In either case, it is difficult <span class='snippet'>to</span>
	analyse requirements <span class='snippet'>to</span> locate all points
	in the system where aspects should be applied. These issues lead
	<span class='snippet'>to</span> problems achieving traceability of
	aspects throughout the development lifecycle. <span class='snippet'>To</span>
	identify aspects <span class='snippet'>early</span> in the software
	lifecycle, and establish sufficient traceability, developers need
	support for <span class='snippet'>aspect</span> identification and
	analysis in requirements documentation. <span class='snippet'>To</span>
	address this, we have devised the Theme <span class='snippet'>approach</span>
	for viewing the relationships between behaviours in a requirements
	document, identifying and isolating aspects in the requirements,
	and <span class='snippet'>modelling</span> those aspects using a
	<span class='snippet'>design</span> language. This paper describes
	the <span class='snippet'>approach</span>, and illustrates it with
	a case study and analysis.},
  citeseerurl = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.10.5157},
  comment = {class diagram, sequence diagram},
  doi = {10.1.1.10.5157},
  file = {:./process/interesse/basico/10.1.1.10.5157.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{Baudry05exploringthe,
  author = {Benoit Baudry and Franck Fleurey and Robert France and Raghu Reddy},
  title = {Exploring the Relationship Between Model composition and Model Transformation},
  booktitle = {7th International Workshop on Aspect-Oriented Modeling, Montego},
  year = {2005},
  pages = {2},
  abstract = {In aspect-oriented modeling (AOM), a design is presented in terms
	of multiple user-defined views (aspects) and model composition is
	often carried out to obtain a model that provides an integrated view
	of the design. Typically, model composition involves merging two
	or more models to obtain a single model. Model composition and model
	transformations that incorporate new features into a model seem to
	serve the same},
  citeseerurl = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.96.1351},
  comment = {class diagram, model weaving},
  doi = {10.1.1.96.1351},
  file = {:./process/interesse/class diagrams/AOM05-a.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Bencomo2005,
  author = {Bencomo, N. and Blair, G. and Coulson, G. and Grace, P. and Rashid,
	A.},
  title = {Reflection and aspects meet again: runtime reflective mechanisms
	for dynamic aspects},
  booktitle = {AOMD '05: Proceedings of the 1st workshop on Aspect oriented middleware
	development},
  year = {2005},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Distributed applications and middleware systems typically involve
	language and system-wide heterogeneity e.g. different platforms (PC,
	PDA, embedded devices, etc.). Dynamic adaptation of distributed systems
	at run-time is a common approach to deal with the resultant environmental
	conditions. Dynamic aspects have been identified as a technique to
	address this problem. In such kind of applications, advices cannot
	be considered as a simple 'piece of code' as it might be in single-language
	AOP approaches; instead advices should be realised in different ways
	in distinct parts of the system depending upon the platform, language,
	and dynamics of program execution. This position paper discusses
	the use of a suit of orthogonal meta-level models as the basis to
	provide different reflective implementation mechanisms for supporting
	AOP approaches in a language and platform independent fashion.},
  comment = {class diagram, formal, interaction diagram},
  doi = {http://doi.acm.org/10.1145/1101560.1101567},
  file = {:./process/interesse/class diagrams/a7-bencomo.pdf:PDF},
  isbn = {1-59593-265-8},
  location = {Grenoble, France},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@STANDARD{AOSDONTO,
  title = {AOSD Ontology 1.0 - Public Ontology of Aspect-Orientation},
  organization = {AOSD-Europe},
  institution = {AOSD-Europe},
  author = {Klaas van den Berg and Jose Maria Conejero and Ruzanna Chitchyan},
  language = {English},
  number = {D9},
  revision = {1.0},
  month = {May},
  year = {2005},
  file = {:./process/interesse/BergConChi2005.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.12}
}

@INPROCEEDINGS{Blanco2008,
  author = {Blanco, Rolando and Wang, Jun and Alencar, Paulo},
  title = {A metamodel for distributed event based systems},
  booktitle = {DEBS '08: Proceedings of the second international conference on Distributed
	event-based systems},
  year = {2008},
  pages = {221--232},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {A metamodel, suitable for the study of modularization and composition
	of functionality in distributed event systems, is proposed in this
	paper. The metamodel describes the structural, control, and runtime
	aspects of distributed event systems. Central to the metamodel is
	the use of reactive component interfaces. Reactive component interfaces
	specify the events components in the system generate and react to,
	and describe the behaviour expected from the components. Gem, a distributed
	event system that follows the metamodel is presented. Two composition
	mechanisms, interface extension and encapsulation, are supported
	in Gem and serve to illustrate the type of compositions that can
	be implemented by systems that conform to the metamodel.},
  comment = {class diagram, metamodel},
  doi = {http://doi.acm.org/10.1145/1385989.1386018},
  file = {:./process/interesse/class diagrams/p221-blanco.pdf:PDF},
  isbn = {978-1-60558-090-6},
  keywords = {Software modularizatiom, composition},
  location = {Rome, Italy},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{DeBorger2010,
  author = {de Borger, Wouter and De Win, Bart and Lagaisse, Bert and Joosen,
	Wouter},
  title = {A permission system for secure AOP},
  booktitle = {AOSD '10: Proceedings of the 9th International Conference on Aspect-Oriented
	Software Development},
  year = {2010},
  pages = {205--216},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {The integration of third-party aspects into applications creates security
	challenges. Due to the intrusive impact of aspects, one cannot guarantee
	that the dynamic composition of aspects does not lead to misbehavior.
	The newly composed aspect typically has many, if not unrestricted,
	rights to read and modify attributes of the base system. AspectJ,
	amongst other AOP systems, suffers from this limitation, which makes
	the composition of independently developed aspects riskful. We have
	defined and prototyped a run-time policy enforcement model based
	on execution history to protect programs from untrusted aspects.
	The dynamic nature of the approach has the advantage that up to date
	run-time information allows more accurate decision making. We have
	built a prototype for AspectJ and illustrate its use in a realistic
	example. Our evaluation shows that practical use of such a solution
	is feasible and that run-time overhead can be limited.},
  comment = {secure composition},
  doi = {http://doi.acm.org/10.1145/1739230.1739254},
  file = {:./process/interesse/secure composition/p205-de_borger.pdf:PDF},
  isbn = {978-1-60558-958-9},
  location = {Rennes and Saint-Malo, France},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{bynens,
  author = {Bynens, M. and Landuyt, D.V. and Truyen, E. and Joosen, W.},
  title = {Towards Reusable Aspects: The Mismatch Problem},
  booktitle = {Workshop on Aspect, Components and Patterns for Infrastructure Software
	(ACP4IS'10)},
  year = {2010},
  pages = {17-20},
  owner = {thiago},
  timestamp = {2012.04.17}
}

@INPROCEEDINGS{Cacho2006,
  author = {Cacho, Nelio and Sant'Anna, Claudio and Figueiredo, Eduardo and Garcia,
	Alessandro and Batista, Thais and Lucena, Carlos},
  title = {Composing design patterns: a scalability study of aspect-oriented
	programming},
  booktitle = {AOSD '06: Proceedings of the 5th international conference on Aspect-oriented
	software development},
  year = {2006},
  pages = {109--121},
  address = {New York, NY, USA},
  publisher = {ACM},
  __markedentry = {[Thiago Gottardi]},
  abstract = {Pattern composition has been shown as a challenge to applying design
	patterns in real software systems. One of the main problems is that
	multiple design patterns in a system are not limited to affect only
	the application concerns. They also crosscut each other in multiple
	heterogeneous ways so that their separation and composition are far
	from being trivial. In this context, it is of paramount importance
	to systematically verify whether aspect-oriented programming (AOP)
	supports improved composability of design patterns. This paper presents
	a systematic investigation on how AOP scales up to deal with modularization
	of pattern-specific concerns in the presence of pattern interactions.
	We have made both qualitative and quantitative assessments of 62
	pairwise compositions taken from 3 medium-sized systems implemented
	in Java and AspectJ programming languages. Our analysis has also
	included the evaluation of compositions involving more than two patterns.
	The assessment was based on four fundamental software attributes,
	namely separation of concerns, coupling, cohesion, and conciseness.},
  comment = {metrics},
  doi = {http://doi.acm.org/10.1145/1119655.1119672},
  file = {:./process/interesse/metrics-complexity/p109-cacho.pdf:PDF},
  isbn = {1-59593-300-X},
  location = {Bonn, Germany},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{cammas,
  author = {Camargo, V.V. and Masiero, P.C.},
  title = {A Pattern To Design Crosscutting Framework Families},
  booktitle = {ACM Annual Symposium On Applied Computing (ACM-SAC), Fortaleza, Brasil},
  year = {2008}
}

@INPROCEEDINGS{camanais,
  author = {Camargo, V.V. and Masiero, P.C.},
  title = {Frameworks Orientados A Aspectos},
  booktitle = {Anais Do 19º Simpósio Brasileiro De Engenharia De Software (SBES'2005),
	Uberlândia-MG, Brasil, Outubro.},
  year = {2005},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.26}
}

@PHDTHESIS{camargophd,
  author = {Camargo, V V.},
  title = {Frameworks Transversais: Definições, Classificações e Utilização
	em um Processo de Desenvolvimento.},
  school = {Tese de Doutorado. Instituto de Ciências Matemáticas e de Computação,
	USP, São Carlos},
  year = {2006},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.26}
}

@INPROCEEDINGS{deCamargo:2008:PDC:1363686.1363863,
  author = {Camargo, Valter Vieira and Masiero, Paulo Cesar},
  title = {A Pattern to Design Crosscutting Frameworks},
  booktitle = {Proceedings of the 2008 ACM symposium on Applied computing},
  year = {2008},
  series = {SAC '08},
  pages = {759--764},
  address = {New York, NY, USA},
  publisher = {ACM},
  acmid = {1363863},
  doi = {http://doi.acm.org/10.1145/1363686.1363863},
  isbn = {978-1-59593-753-7},
  keywords = {architecture, aspect-oriented frameworks, crosscutting frameworks,
	design of aspect-oriented frameworks},
  location = {Fortaleza, Ceara, Brazil},
  numpages = {6},
  url = {http://doi.acm.org/10.1145/1363686.1363863}
}

@INPROCEEDINGS{valterCFF,
  author = {de Camargo, Valter Vieira and Masiero, Paulo Cesar},
  title = {An approach to Design Crosscutting Framework Families},
  booktitle = {Proceedings of the 2008 AOSD workshop on Aspects, components, and
	patterns for infrastructure software},
  year = {2008},
  pages = {3:1--3:6},
  address = {New York, NY, USA},
  publisher = {ACM}
}

@INPROCEEDINGS{Camilleri2008,
  author = {Camilleri, Andrew and Blair, Lynne and Coulson, Geoffrey},
  title = {Securing aspect composition},
  booktitle = {SAC '08: Proceedings of the 2008 ACM symposium on Applied computing},
  year = {2008},
  pages = {278--279},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Although research in AOP is increasing in maturity there remain many
	unresolved issues. While current AOP languages offer ever-increasing
	levels of flexibility, they still fail to offer a sufficient discipline
	of application to ensure that advanced AOP facilities are used safely
	and appropriately. Researchers have recognised the need to control
	aspect composition and have started to explore mechanisms to achieve
	this [2, 3, 4, 5]. In this paper we aim to provide a novel approach
	to control aspect composition (using AspectJ as reference) and we
	employ the concept of roles from Role Based Access Control Models
	[1] to characterise aspects in terms of both their internal behaviour
	and their external composition. Then, using policies, we express
	invariants and constraints on the associated advice and pointcuts.},
  comment = {secure composition},
  doi = {http://doi.acm.org/10.1145/1363686.1363757},
  file = {:./process/interesse/secure composition/p278-camilleri.pdf:PDF},
  isbn = {978-1-59593-753-7},
  location = {Fortaleza, Ceara, Brazil},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Cechticky:2003:GAF:954186.954203,
  author = {Cechticky, Vaclav and Chevalley, Philippe and Pasetti, Alessandro
	and Schaufelberger, Walter},
  title = {A generative approach to framework instantiation},
  booktitle = {Proceedings of the 2nd international conference on Generative programming
	and component engineering},
  year = {2003},
  series = {GPCE '03},
  pages = {267--286},
  address = {New York, NY, USA},
  publisher = {Springer-Verlag New York, Inc.},
  acmid = {954203},
  isbn = {3-540-20102-5},
  location = {Erfurt, Germany},
  numpages = {20},
  owner = {Thiago Gottardi},
  timestamp = {2011.04.03},
  url = {http://portal.acm.org/citation.cfm?id=954186.954203}
}

@INPROCEEDINGS{Chitchyan2009,
  author = {Chitchyan, Ruzanna and Greenwood, Phil and Sampaio, Americo and Rashid,
	Awais and Garcia, Alessandro and Fernandes da Silva, Lyrene},
  title = {Semantic vs. syntactic compositions in aspect-oriented requirements
	engineering: an empirical study},
  booktitle = {AOSD '09: Proc.of the 8th International Conf. on Aspect-oriented
	Software Development},
  year = {2009},
  pages = {149--160},
  address = {New York, NY, USA},
  publisher = {ACM},
  __markedentry = {[Thiago Gottardi]},
  abstract = {Most current aspect composition mechanisms rely on syntactic references
	to the base modules or wildcard mechanisms quantifying over such
	syntactic references in pointcut expressions. This leads to the well-known
	problem of pointcut fragility. Semantics-based composition mechanisms
	aim to alleviate such fragility by focusing on the meaning and intention
	of the composition hence avoiding strong syntactic dependencies on
	the base modules. However, to date, there are no empirical studies
	validating whether semantics based composition mechanisms are indeed
	more expressive and less fragile compared to their syntax-based counterparts.
	In this paper we present a first study comparing semantics- and syntax-based
	composition mechanisms in aspect-oriented requirements engineering
	(AORE). In our empirical study the semantics-based compositions examined
	were found to be indeed more expressive and less fragile. The semantics-based
	compositions in the study also required one to reason about composition
	interdependencies early on hence potentially reducing the overhead
	of revisions arising from later trade-off analysis and stakeholder
	negotiations. However, this added to the overhead of specifying the
	compositions themselves. Furthermore, since the semantics-based compositions
	considered in the study were based on natural language analysis,
	they required initial effort investment into lexicon building as
	well as strongly depended on advanced tool support to expose the
	natural language semantics.},
  comment = {metrics, use case},
  doi = {http://doi.acm.org/10.1145/1509239.1509260},
  file = {:./process/interesse/requirements usecase/p149-chitchyan.pdf:PDF},
  isbn = {978-1-60558-442-3},
  location = {Charlottesville, Virginia, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Chitchyan2007,
  author = {Chitchyan, Ruzanna and Rashid, Awais and Rayson, Paul and Waters,
	Robert},
  title = {Semantics-based composition for aspect-oriented requirements engineering},
  booktitle = {AOSD '07: Proc.of the 8th International Conf. on Aspect-oriented
	Software Development},
  year = {2007},
  pages = {36--48},
  address = {New York, NY, USA},
  publisher = {ACM},
  __markedentry = {[Thiago Gottardi]},
  abstract = {In this paper, we discuss the limitations of the current syntactic
	composition mechanisms in aspect-oriented requirements engineering
	(AORE). We highlight that such composition mechanisms not only increase
	coupling between aspects and base concerns but are also insufficient
	to capture the intentionality of the aspect composition. Furthermore,
	they force the requirements engineer to reason about semantic influences
	and trade-offs among aspects from a syntactic perspective. We present
	a requirements description language (RDL) that enriches the existing
	natural language requirements specification with semantic information
	derived from the semantics of the natural language itself. Composition
	specifications are written based on these semantics rather than requirements
	syntax hence providing improved means for expressing the intentionality
	of the composition, in turn facilitating semantics-based reasoning
	about aspect influences and trade-offs. We also discuss the practicality
	of the use of this RDL by outlining the automation support for requirements
	annotation (realized as an extension of the Wmatrix natural language
	processing tool suite) to expose the semantics which are in turn
	utilized to facilitate composition and analysis (supported by the
	MRAT tool).},
  comment = {model weaving, use case},
  doi = {http://doi.acm.org/10.1145/1218563.1218569},
  file = {:./process/interesse/model weaving/p36-chitchyan.pdf:PDF},
  isbn = {1-59593-615-7},
  location = {Vancouver, British Columbia, Canada},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@BOOK{themebook,
  title = {Aspect Oriented Analysis and Design},
  publisher = {Pearson Education},
  year = {2005},
  author = {Clarke, S. and Baniassad, E.},
  pages = {400},
  edition = {1$^{a}$},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.15}
}

@INPROCEEDINGS{Clemente2007,
  author = {Pedro J. Clemente and Juan Hernandez and Fernando Sanchez},
  title = {Driving Component Composition from Early Stages Using Aspect-Oriented
	Techniques},
  booktitle = {Proc. 40th Annual Hawaii Int. Conf. System Sciences HICSS 2007},
  year = {2007},
  abstract = {Component-based software engineering is an emerging discipline that
	is generating tremendous interest due to the development of plug-and-play
	reusable software. However, component adaptation and later composition
	still challenges the software engineering community because of the
	binary nature of software components. Once a binary component is
	ready to market, its contract cannot be changed in order to be adapted
	to new contexts or new requirements. Aspect-orientation facilitates
	software adaptation and evolution by increasing software modularization.
	In this sense, aspect-oriented mechanisms can obviates contracts
	to weave new behaviour to an already developed system by means of
	hooks and behaviour attached to theses hooks. In this paper, a component
	composition mechanism based on aspect-oriented techniques is presented,
	which extends typical composition based on interfaces or events.
	Components and their composition are modeled using \textsc{UML} at
	early development phases. Our approach is based on model-driven development
	(MDD), allowing systems to be built from analysis to deployment,
	automatically generating the required artifacts (such as wrappers
	or assembly descriptors). This work has been developed using CCM
	as the component model},
  comment = {class diagram, interaction diagram, model weaving},
  doi = {10.1109/HICSS.2007.186},
  file = {:./process/interesse/class diagrams/4076901.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@BOOK{Clements,
  title = {{Software Product Lines: Practices and Patterns}},
  publisher = {Addison-Wesley Professional},
  year = {2001},
  author = {Clements, Paul and Northrop, Linda},
  edition = {3rd}
}

@INPROCEEDINGS{Coelho2006,
  author = {Coelho, Roberta and von Staa, Arndt},
  title = {Using interfaces to support the testing of crosscutting features},
  booktitle = {OOPSLA '06: Companion to the 21st ACM SIGPLAN symposium on Object-oriented
	programming systems, languages, and applications},
  year = {2006},
  pages = {782--783},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {An important question in the context of software product line development
	is how to improve the modularization and composition of crosscutting
	features. However, little attention has been paid to the closely
	related issue of testing the crosscutting features. There is still
	a lack of techniques to help developers test such features. Usually,
	developers test the crosscutting features in combination with the
	affected feature, which impairs the fault diagnosis. This work proposes
	a verification approach for crosscutting features implemented by
	means of aspects and crosscutting interfaces (XPIs).},
  comment = {test debug},
  doi = {http://doi.acm.org/10.1145/1176617.1176723},
  file = {:./process/interesse/test debug/p782-coelhonao.pdf:PDF},
  isbn = {1-59593-491-X},
  location = {Portland, Oregon, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@PHDTHESIS{Constantinides:2000:AFD:933023,
  author = {Constantinides, Constantinos Adonis},
  title = {An aspect-oriented framework for the design of concurrent object-oriented
	systems},
  year = {2000},
  address = {Chicago, IL, USA},
  note = {AAI9996728},
  advisor = {Elrad, Tzilla},
  isbn = {0-493-05899-0},
  publisher = {Illinois Institute of Technology}
}

@INPROCEEDINGS{Constantinides2000,
  author = {Constantinides, Constantinos A. and Elrad, Tzilla},
  title = {Towards a two-dimensional separation of concerns (poster session)},
  booktitle = {OOPSLA '00: Addendum to the 2000 proceedings of the conference on
	Object-oriented programming, systems, languages, and applications
	(Addendum)},
  year = {2000},
  pages = {63--64},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {As the size and requirements of software systems increase, their design
	has reached a complexity that requires software engineers to revisit
	the principle of separation of concerns [5]. Traditional software
	organization has been performed along some form of functional decomposition.
	Different paradigms and languages support the implementation, and
	composition of sub-parts into whole systems through the availability
	of some modular unit of functionality (component). In essence, traditional
	software decomposition and current programming languages have been
	mutually supportive [4]. At the same time, separation of concerns
	can only be beneficial if the different concerns can be effectively
	composed to produce the overall system. The OOP paradigm seems to
	work well only if the problem to be solved can be described with
	relatively simple interfaces among objects. Unfortunately, this is
	not the case when we move from sequential programming to concurrent
	programming where the component interaction violates simple object
	interfaces. One of the reasons behind this is the inherent structure
	of today's software systems that conceptually does not lead itself
	to a safe decomposition. As a result, the benefits associated with
	OOP no longer hold. Component interactions limit reuse and make it
	difficult to validate the design and correctness of software systems.
	Reengineering of these systems is needed in order to meet future
	changes in requirements. This component interaction is based on a
	number of properties that affect the semantics or the performance
	of the system and do not localize well in one modular unit, but tend
	to cut-across groups of components resulting in a ``code tangling''
	[4]. Example cross-cutting properties (or aspects) include synchronization,
	scheduling, and fault tolerance. This code tangling destroys modularity,
	making the source code difficult to develop and difficult to understand.
	It also limits reuse, making the source code difficult to evolve.
	It further makes programs more error prone. In essence, it destroys
	the quality of the software. In [1] the authors refer to these phenomena
	as ``composition anomalies''. This composition anomaly requires a
	shift in the methodologies used to separate concerns. In conjunction
	with modular composition, adaptability and reuse remain major issues
	to be considered while building complex software systems. Aspect-Oriented
	Programming (AOP) [4] is an emerging methodology that addresses components
	and aspects at the analysis and design phase of the software life-cycle,
	using mechanisms to compose them at the implementation level with
	a growing number of different technologies.},
  comment = {class diagram, interaction diagram},
  doi = {http://doi.acm.org/10.1145/367845.367938},
  file = {:./process/interesse/class diagrams/p63-constantinidesVelho.pdf:PDF},
  isbn = {1-58113-307-3},
  location = {Minneapolis, Minnesota, United States},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Cottenier07statefulaspects:,
  author = {Thomas Cottenier and Aswin van den Berg and Tzilla Elrad},
  title = {Stateful Aspects: The Case for Aspect-Oriented Modeling},
  booktitle = {Proceedings of the 10th International Workshop on Aspect-Oriented
	Modeling},
  year = {2007},
  abstract = {In this position paper, the authors argue that Aspect-Oriented
	
	
	Modeling (AOM) technologies have the potential to simplify the 
	
	deployment and the ability to reason about a category of
	
	
	crosscutting concerns that have been categorized in the literature
	
	
	as stateful aspects. Stateful aspects trigger on a sequence of join
	
	
	points instead of on a single join point. Their trigger condition
	is 
	
	history sensitive. We identify three properties of Aspect-Oriented
	
	
	Modeling languages that enable them to provide more natural 
	
	solutions to the stateful aspect problem. The first factor is the
	
	
	ability of modeling languages to support different system 
	
	decompositions paradigms. This ability allows a system to be 
	
	decomposed according to the paradigm that fits the nature of the 
	
	problem the best. Second, these decompositions allow AOM 
	
	languages to capture and reason about pointcut descriptors at a 
	
	higher level of abstraction. Finally, the system decomposition
	
	
	mechanisms can be exploited to advance the compositional 
	
	expressiveness of aspects defined in AOM languages. The paper 
	
	concludes with an invitation to our colleagues in the ?general 
	
	purpose? programming community to embrace modeling 
	
	technologies in the context of automatic code generation.},
  comment = {activity diagram, model weaving},
  doi = {10.1.1.102.7234},
  file = {:./process/interesse/activity diagram/a2-cottenier.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{Cottenier05modelingaspect-oriented,
  author = {Thomas Cottenier and Aswin van den Berg and Tzilla Elrad},
  title = {Modeling Aspect-Oriented Compositions},
  booktitle = {Proceedings of the Satellite Events at the 8th International Conference
	on Model Driven Engineering Languages and Systems, Montego},
  year = {2005},
  pages = {100--109},
  publisher = {Springer-Verlag},
  abstract = {Crosscutting concerns are pervasive in embedded software, because
	of the various constraints imposed by the environment and the stringent
	QOS requirements on the system. This paper presents a framework for
	modularizing crosscutting concerns in embedded and distributed software,
	and automating their composition at the modeling level, for simulation
	and validation purposes. The proposed approach does not extend the
	semantics of \textsc{UML} in order to represent aspects. Rather,
	it dedicates a metamodel to the representation of the composition
	semantics between aspects and core models. The paper illustrates
	this approach by presenting a model weaver for SDL statecharts developed
	at Motorola Labs. Crosscutting behavior is designed with plain SDL
	statecharts and encapsulated into modules called aspect beans. The
	weaver looks at the aspect beans and the core SDL statecharts from
	a perspective that is defined by lightweight extensions to the SDL
	and \textsc{UML} metamodels. A connector metamodel defines the structure
	of the aspect-to-core binding definition. Finally, a weaver behavioral
	metamodel defines composition primitives for specifying weaving strategies.},
  citeseerurl = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.85.3426},
  comment = {class diagram, metamodel, model weaving},
  doi = {10.1.1.85.3426},
  file = {:./process/interesse/class diagrams/Cottenier.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{cunha,
  author = {Cunha, C. and Sobral, J.L. and Monteiro, M.P.},
  title = {Reusable Aspect-Oriented Implementations of Concurrency Patterns
	and Mechanisms},
  booktitle = {Aspect-Oriented Software Development Conference (AOSD'06)},
  year = {2006},
  address = {Bonn, Germany},
  owner = {thiago},
  timestamp = {2012.04.17}
}

@INPROCEEDINGS{Dias2008,
  author = {Dias, F. G. and Schmitz, E. A. and Campos, M. L. M. and Correa, A.
	L. and Alencar, A. J.},
  title = {Elaboration of use case specifications: an approach based on use
	case fragments},
  booktitle = {SAC '08: Proceedings of the 2008 ACM Symposium on Applied Computing},
  year = {2008},
  pages = {614--618},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Use case description has gained a wide acceptance among the many techniques
	available for information systems requirements specification. However,
	piecing up all the details required for the production of a high
	quality use case can be a daunting task, especially for students
	and novice requirements professionals. This paper presents an approach
	aiming at reducing the time required for the elaboration of high
	quality use case specifications. The basis of the approach is to
	write a use case text using the composition of set of pre-defined
	fragments, where each fragment represents a recurring set of interactions
	required to achieve a sub-goal. Each fragment can then be customized
	to meet use case goals. Since each fragment is coded using the best
	practices for writing use case steps, both the fragment text and
	the final use case text will be well composed. We believe that this
	approach will allow novice requirements professional to write high
	quality use cases in less time than it would be necessary using the
	other approaches. Our experience on writing use cases for business
	information systems using a catalogue of use case fragments suggested
	that they can be a facilitator in several aspects, not only improving
	the writing speed, but also leading to standardization and concision
	of use case specifications.},
  comment = {model weaving, use case},
  doi = {http://doi.acm.org/10.1145/1363686.1363835},
  file = {:./process/interesse/model weaving/p614-diasOO.pdf:PDF},
  isbn = {978-1-59593-753-7},
  location = {Fortaleza, Ceara, Brazil},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@BOOK{Dij76,
  title = {A Discipline of Programming},
  publisher = {Prentice Hall, Inc.},
  year = {1976},
  author = {Edsger Wybe Dijkstra},
  pages = {217},
  edition = {217 pg. 1$^{a}$},
  month = {October},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.20}
}

@INPROCEEDINGS{Dinkelaker,
  author = {Tom Dinkelaker and Ralf Mitschke and Karin Fetzer and Mira Mezini},
  title = {A Dynamic Software Product Line Approach using Aspect Models at Runtime},
  booktitle = {In: Composition \& Variability' 2010},
  year = {2010},
  address = {Rennes \& Saint Malo, France},
  month = {March},
  publisher = {9th International Conference on Aspect-Oriented Software Development
	(AOSD.10)},
  abstract = {Dynamicsoftwareproductlines(DSPLs)aresoftwareprod-
	
	uctlines,whichsupportlatevariabilitythatisbuiltinto
	
	thesystemtoaddressrequirementsthatchangeatruntime.
	
	Butitisdiculttoensureatruntimethatallpossibleadap-
	
	tationsleadtoacorrectconguration.Inthispaper,we
	
	proposeanovelapproachforDSPLsthatusesadynamic
	
	featuremodeltodescribethevariabilityintheDSPLsand
	
	thatusesadomain-speciclanguagefordeclarativelyim-
	
	plementingvariationsandtheirconstraints.Theapproach
	
	combinesseveraltrendsinaspect-orientedprogrammingfor
	
	DSPLs,namelydynamicaspects,runtimemodelsofaspects,
	
	aswellasdetectionandresolutionofaspectinteractions.
	
	Theadvantageis,thatrecongurationsmustnotbespeci-
	
	edforeveryfeaturecombination,butonlyforinteracting
	
	features.Wehavevalidatedtheapproachinanexampledy-
	
	namicsoftwareproductlinefromindustryandpreliminarily
	
	evaluatedtheapproach.},
  comment = {product line, feature},
  file = {:C\:/artigos/process/interesse/A Dynamic Software Product Line Approach using Aspect Models at Runtime.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.11}
}

@INPROCEEDINGS{Douence2004,
  author = {Douence, R\'{e}mi and Fradet, Pascal and S\"{u}dholt, Mario},
  title = {Composition, reuse and interaction analysis of stateful aspects},
  booktitle = {AOSD '04: Proceedings of the 3rd international conference on Aspect-oriented
	software development},
  year = {2004},
  pages = {141--150},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Aspect-Oriented Programming promises separation of concerns at the
	implementation level. However, aspects are not always orrthogonal
	and aspect interaction is a fundamental problem. In this paper, we
	extend previous work on a generic framework for the formal definition
	and interaction analysis of stateful aspects. We propose three important
	extensions which enhance expressivity while preserving static analyzability
	of interactions. First, we provide support for variables in aspects
	in order to share information between different execution points.
	This allows the definition of more precise aspects and to avoid detection
	of spurious conflicts. Second, we introduce generic composition operators
	for aspects. This enables us to provide expressive support for the
	resolution of conflicts among interacting aspects. Finally, we offer
	a means to define applicability conditions for aspects. This makes
	interaction analysis more precise and paves the way for reuse of
	aspects by making explicit requirements on contexts in which aspects
	must be used.},
  comment = {formal},
  doi = {http://doi.acm.org/10.1145/976270.976288},
  file = {:./process/interesse/formal specifications/p141-douence.pdf:PDF},
  isbn = {1-58113-842-3},
  location = {Lancaster, UK},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Eaddy2007,
  author = {Eaddy, Marc and Aho, Alfred and Hu, Weiping and McDonald, Paddy and
	Burger, Julian},
  title = {Debugging aspect-enabled programs},
  booktitle = {SC'07: Proceedings of the 6th international conference on Software
	composition},
  year = {2007},
  pages = {200--215},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  abstract = {The ability to debug programs composed using aspect-oriented programming
	(AOP) techniques is critical to the adoption of AOP. Nevertheless,
	many AOP systems lack adequate support for debugging, making it difficult
	to diagnose faults and understand the program's composition and control
	flow. We present an AOP debug model that characterizes AOP-specific
	program composition techniques and AOP-specific program behaviors,
	and relates them to the AOP-specific faults they induce. We specify
	debugging criteria that we feel all AOP systems should support and
	compare how several AOP systems measure up to this ideal. We explain
	why AOP composition techniques, particularly dynamic and binary weaving,
	hinder source-level debugging, and how results from related research
	on debugging optimized code help solve the problem. We also present
	Wicca, the first dynamic AOP system to support full source-level
	debugging. We demonstrate how Wicca's powerful interactive debugging
	features allow a programmer to quickly diagnose faults in the base
	program behavior or AOP-specific behavior.},
  comment = {test debug},
  file = {:./process/interesse/test debug/p200-eaddy.pdf:PDF},
  isbn = {3-540-77350-9, 978-3-540-77350-4},
  location = {Braga, Portugal},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@STANDARD{GMP,
  title = {\textsc{G}raphical \textsc{M}odeling \textsc{F}ramework, version
	1.5.0},
  organization = {Graphical Modeling Project},
  institution = {Eclipse Consortium},
  author = {{Eclipse~Consortium}},
  howpublished = {http://www.eclipse.org/modeling/gmp/},
  year = {2011},
  owner = {thiago},
  timestamp = {2011.03.09}
}

@INPROCEEDINGS{Evermann2007,
  author = {Evermann, Joerg},
  title = {A meta-level specification and profile for AspectJ in \textsc{UML}},
  booktitle = {AOM '07: Proceedings of the 10th international workshop on Aspect-oriented
	modeling},
  year = {2007},
  pages = {21--27},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Aspect-oriented programming (AOP) has become a mature technology.
	Increasingly, calls for support of AOP on the software model level
	are being voiced. This paper addresses these calls by offering a
	meta-model of AspectJ in \textsc{UML}. Using the \textsc{UML} extension
	mechanisms, this meta-model is at the same time a profile to support
	AspectJ modelling in \textsc{UML}. In contrast to previous work,
	this profile offers complete meta-level integration of all AspectJ
	concepts. The use of standard XMI based modelling allows the use
	of the profile in commercially available CASE tools and supports
	easy code generation.},
  doi = {http://doi.acm.org/10.1145/1229375.1229379},
  isbn = {978-1-59593-658-5},
  location = {Vancouver, Canada},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.15}
}

@INPROCEEDINGS{FariasWasp,
  author = {Kleinner Farias and Alessandro Garcia and Carlos Lucena},
  title = {On the Comparative Evaluation of Aspect-Oriented Model Composition
	Techniques.},
  booktitle = {Proc. of the III Latin American Workshop on Aspect-Oriented Software
	Development, LA-WASP'2009},
  year = {2009},
  address = {Fortaleza, CE - Brazil},
  month = {October},
  publisher = {CBSoft 2009},
  abstract = {Aspect-oriented model (AOM) composition 
	
	techniques are responsible for expressing crosscutting 
	
	relationships between aspect and base models. However, given 
	
	their growing heterogeneity, it is particularly challenging for 
	
	designers to both objectively assess them and take decision on 
	
	which is the best according to their supported composition
	
	
	facilities. This work provides a systematic comparison of
	
	representative AOM composition techniques. For this purpose, 
	
	we propose a set of proposed evaluation criteria: the model
	
	
	composition process followed; the manner of matching the 
	
	input models; the type of composition strategies used; the 
	
	manner of assessing the composition results; and how the 
	
	techniques address conflict resolution. Such criteria enable us 
	
	to pinpoint the commonalities and differences as well as 
	
	strengths and shortcomings of the three studied techniques.},
  comment = {model weaving, weaving conflicts},
  doi = {10.1.1.84.3022},
  file = {:./process/interesse/model weaving/008.pdf:PDF},
  keywords = {model composition, aspect-oriented modeling, aspect-oriented model
	composition techniques},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Farias2010,
  author = {Farias, Kleinner and Garcia, Alessandro and Whittle, Jon},
  title = {Assessing the impact of aspects on model composition effort},
  booktitle = {AOSD '10: Proceedings of the 9th International Conference on Aspect-Oriented
	Software Development},
  year = {2010},
  pages = {73--84},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Model composition is a common operation used in many software development
	activities---for example, reconciling models developed in parallel
	by different development teams, or merging models of new features
	with existing model artifacts. Unfortunately, both commercial and
	academic model composition tools suffer from the composition conflict
	problem. That is, models to-be-composed may conflict with each other
	and these conflicts must be resolved. In practice, detecting and
	resolving conflicts is a highly-intensive manual activity. In this
	paper, we investigate whether aspect-orientation reduces conflict
	resolution effort as improved modularization may better localize
	conflicts. The main goal of the paper is to conduct an exploratory
	study to analyze the impact of aspects on conflict resolution. In
	particular, model compositions are used to express the evolution
	of architectural models along six releases of a software product
	line. Well-known composition algorithms, such as override, merge
	and union, are applied and compared on both AO and non-AO models
	in terms of their conflict rate and effort to solve the identified
	conflicts. Our findings identify specific scenarios where aspect-orientation
	properties, such as obliviousness and quantification, result in a
	lower (or higher) composition effort.},
  comment = {class diagram, model composition, weaving conflicts},
  doi = {http://doi.acm.org/10.1145/1739230.1739240},
  file = {:./process/interesse/class diagrams/p73-fariasO.pdf:PDF},
  isbn = {978-1-60558-958-9},
  location = {Rennes and Saint-Malo, France},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@ARTICLE{Fayad:1997:OAF:262793.262798,
  author = {Fayad, Mohamed and Schmidt, Douglas C.},
  title = {Object-oriented application frameworks},
  journal = {Commun. ACM},
  year = {1997},
  volume = {40},
  pages = {32--38},
  month = {October},
  acmid = {262798},
  address = {New York, NY, USA},
  doi = {http://doi.acm.org/10.1145/262793.262798},
  issn = {0001-0782},
  issue = {10},
  numpages = {7},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/262793.262798}
}

@INPROCEEDINGS{oblivion,
  author = {Filman, R. and Friedman, D.},
  title = {Aspect-oriented Programming is Quantification and Obliviousness},
  booktitle = {Workshop on Advanced Separation of Concerns, OOPSLA 2000},
  year = {2000},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.22}
}

@INPROCEEDINGS{France2007,
  author = {France, R. and Fleurey, F. and Reddy, R. and Baudry, B. and Ghosh,
	S.},
  title = {Providing Support for Model Composition in Metamodels},
  booktitle = {Proc. 11th IEEE Int. Enterprise Distributed Object Computing Conf.
	EDOC 2007},
  year = {2007},
  pages = {253},
  __markedentry = {[Administrator]},
  abstract = {<span class='snippet'>In</span> aspect-oriented <span class='snippet'>modeling</span>
	(AOM), a design is described using a set of design views. It is sometimes
	necessary to compose the views to obtain an integrated view that
	can be analyzed by tools. Analysis can uncover conflicts and interactions
	that give rise to undesirable emergent behavior. Design <span class='snippet'>models</span>
	tend to have complex structures and thus manual <span class='snippet'>model</span>
	<span class='snippet'>composition</span> can be arduous and error-
	prone. Tools that automate significant parts of <span class='snippet'>model</span>
	<span class='snippet'>composition</span> are needed if AOM is to
	gain industrial acceptance. One way of <span class='snippet'>providing</span>
	automated <span class='snippet'>support</span> <span class='snippet'>for</span>
	composing <span class='snippet'>models</span> written <span class='snippet'>in</span>
	a particular language is to define <span class='snippet'>model</span>
	<span class='snippet'>composition</span> behavior <span class='snippet'>in</span>
	the metamodel defining the language. <span class='snippet'>In</span>
	this paper we show how this can be done by extending the \textsc{UML}
	metamodel with behavior describing symmetric, signature-based <span
	class='snippet'>composition</span> of \textsc{UML} <span class='snippet'>model</span>
	elements. We also describe an implementation of the metamodel that
	<span class='snippet'>supports</span> systematic <span class='snippet'>composition</span>
	of \textsc{UML} class <span class='snippet'>models</span>.},
  comment = {class diagram, interaction diagram, metamodel, model weaving},
  doi = {10.1109/EDOC.2007.55},
  file = {:./process/interesse/class diagrams/4383998.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@ARTICLE{France2004,
  author = {France, R. and Ray, I. and Georg, G. and Ghosh, S.},
  title = {Aspect-oriented approach to early design modelling},
  journal = {IEE Proceedings -Software},
  year = {2004},
  volume = {151},
  pages = {173--185},
  number = {4},
  abstract = {Developers of modern software systems are often required <span class='snippet'>to</span>
	build software that addresses security, fault-tolerance and other
	dependability concerns. A decision <span class='snippet'>to</span>
	address a dependability concern in a particular manner can make it
	difficult or impossible <span class='snippet'>to</span> address other
	concerns in software. Proper attention <span class='snippet'>to</span>
	balancing key dependability and other concerns in the <span class='snippet'>early</span>
	phases of development can help developers better manage product risks
	through <span class='snippet'>early</span> identification and resolution
	of conflicts and undesirable emergent behaviours that arise as a
	result of interactions across behaviours that address different concerns.
	The authors describe an <span class='snippet'>aspect</span>-<span
	class='snippet'>oriented</span> <span class='snippet'>modelling</span>
	(AOM) <span class='snippet'>approach</span> that eases the task of
	exploring alternative ways of addressing concerns during software
	<span class='snippet'>modelling</span>. The paper focuses on use
	of the AOM <span class='snippet'>approach</span> <span class='snippet'>to</span>
	produce logical, <span class='snippet'>aspect</span>-<span class='snippet'>oriented</span>
	architecture <span class='snippet'>models</span> (AAMs) that describe
	how concerns are addressed in technology-independent terms. An AAM
	consists of a set of <span class='snippet'>aspect</span> <span class='snippet'>models</span>
	and a base architecture <span class='snippet'>model</span> called
	the primary <span class='snippet'>model</span>. An <span class='snippet'>aspect</span>
	<span class='snippet'>model</span> describes how a dependability
	concern is addressed, and a primary <span class='snippet'>model</span>
	describes how other concerns are addressed. Composition of the <span
	class='snippet'>aspect</span> and primary <span class='snippet'>models</span>
	in an AAM produces an integrated view of the logical architecture
	described by the AAM. Composition can reveal conflicts and undesirable
	emergent properties. Resolving these problems can involve developing
	and analysing alternative ways of addressing concerns. Localising
	the parts of an architecture that address pervasive and nonorthogonal
	dependability concerns in <span class='snippet'>aspect</span> <span
	class='snippet'>models</span> allows developers <span class='snippet'>to</span>
	more easily evolve and replace the parts as they explore alternative
	ways of balancing concerns in the <span class='snippet'>early</span>
	stages of development.},
  comment = {class diagram, use case},
  doi = {10.1049/ip-sen:20040920},
  file = {:./process/interesse/class diagrams/1341255.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{France:2007:MDC:1253532.1254709,
  author = {France, Robert and Rumpe, Bernhard},
  title = {Model-driven Development of Complex Software: A Research Roadmap},
  booktitle = {2007 Future of Software Engineering},
  year = {2007},
  series = {FOSE '07},
  pages = {37--54},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  acmid = {1254709},
  doi = {http://dx.doi.org/10.1109/FOSE.2007.14},
  isbn = {0-7695-2829-5},
  numpages = {18},
  owner = {thiago},
  timestamp = {2011.03.15},
  url = {http://dx.doi.org/10.1109/FOSE.2007.14}
}

@INPROCEEDINGS{FranceMDD,
  author = {France, Robert and Rumpe, Bernhard},
  title = {Model-driven Development of Complex Software: A Research Roadmap},
  booktitle = {2007 Future of Software Engineering},
  year = {2007},
  series = {FOSE 07},
  pages = {37-54},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society}
}

@ARTICLE{Fuentes2008,
  author = {Fuentes, Lidia and Pinto, M\'{o}nica and S\'{a}nchez, Pablo},
  title = {Generating CAM aspect-oriented architectures using Model-Driven Development},
  journal = {Inf. Softw. Technol.},
  year = {2008},
  volume = {50},
  pages = {1248--1265},
  number = {12},
  abstract = {Aspect-Oriented Software Development promotes the separation of those
	concerns that cut across several components and/or are tangled with
	the base functionality of a component, through all phases of the
	software lifecycle. The benefit of identifying these crosscutting
	concerns (aspects) at the architectural level in particular is to
	improve the architecture design and its subsequent evolution, before
	moving onto detailed design and implementation. However, software
	architects are not usually experts on using specific AO architecture
	notations. Therefore, the aim of this paper is to provide support
	to define and specify aspect-oriented (AO) architectures using non-AO
	ones as the source. We will use the Model-Driven Development approach
	to transform a component-based architecture model into an AO architecture
	model. The CAM (component and aspect model) model and the DAOP-ADL
	language are the proposals used for modelling and specifying AO architectures.
	We will show how we automated part of the process and the tool support.},
  address = {Newton, MA, USA},
  doi = {http://dx.doi.org/10.1016/j.infsof.2007.10.020},
  issn = {0950-5849},
  owner = {Thiago Gottardi},
  publisher = {Butterworth-Heinemann},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Fuentes2007,
  author = {Lidia Fuentes and Pablo S\'{a}nchez},
  title = {Towards executable aspect-oriented \textsc{UML} models},
  booktitle = {AOM '07: Proceedings of the 10th international workshop on Aspect-oriented
	modeling},
  year = {2007},
  pages = {28--34},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Aspect-Oriented technologies, including Aspect-Oriented Modeling,
	introduces a set of new constructions, e.g., advices or pointcuts,
	that improve the modularization of crosscutting concerns. These new
	constructions can make it more difficult to understand or visualize
	how a system works after the different (design) modules are composed
	together. A straightforward and simple mechanism to observe how a
	system works is to execute it. \textsc{UML} and its Action Semantics
	provide the foundations for modeling and executing object-oriented
	software systems. This paper presents an aspect-oriented extension
	to the \textsc{UML} and its Action Semantics for the construction
	and execution of aspect-oriented models. Before executing such aspect-oriented
	models, they must be weaved. The corresponding model weaver is also
	presented in this paper.},
  comment = {activity diagram, model weaving},
  doi = {http://doi.acm.org/10.1145/1229375.1229380},
  file = {:./process/interesse/activity diagram/a5-fuentes.pdf:PDF},
  isbn = {978-1-59593-658-5},
  location = {Vancouver, Canada},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{Garcia2009,
  author = {Garcia, Alessandro Fabricio and Figueiredo, Eduardo Magno Lages and
	Sant'Anna, Claudio Nogueira and Pinto, Monica and Fuentes, Lidia},
  title = {Representing architectural aspects with a symmetric approach},
  booktitle = {EA '09: Proceedings of the 15th workshop on Early aspects},
  year = {2009},
  pages = {25--30},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Aspect-oriented (AO) techniques are emerging as promising approaches
	to enhance the representation of crosscutting concerns throughout
	the software lifecycle. This includes new AO specification mechanisms
	for the architectural design stage that is at the heart of the software
	process. However, existing modelling languages have failed short
	to provide simple and scalable notations for visually representing
	the so-called "architectural aspects". This paper reports our ongoing
	effort on the definition of a visual architecture representation
	for aspect-oriented systems. Our proposal follows a symmetric approach
	and provides a more expressive set of visual elements in order to:
	(i) provide a more intuitive notation for expressing aspectual compositions,
	(ii) facilitate a symbiotic transition of AO requirements specifications
	to AO architecture designs, (iii) make the transition of architectural
	descriptions to AO detailed designs more straightforward, and (iv)
	improve the early detection of modularity anomalies in aspect-oriented
	design. We discuss the advantages and drawbacks of our modelling
	proposal in terms of two applications from different domains.},
  comment = {class diagram, metamodel},
  doi = {http://doi.acm.org/10.1145/1509825.1509831},
  file = {:./process/interesse/class diagrams/p25-garcia.pdf:PDF},
  isbn = {978-1-60558-456-0},
  location = {Charlottesville, Virginia, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Georg2002,
  author = {Geri Georg and Robert France},
  title = {UML Aspect Specification Using Role Models},
  booktitle = {Proceedings of the 8th International Conference on Object-Oriented},
  year = {2002},
  abstract = {Aspect-oriented modeling (AOM) techniques allow system developers
	to address pervasive objectives such as security and fault-tolerance
	separately from core functional requirements during system design.
	An aspect-oriented design model consists of a set of aspects and
	a primary model. An aspect describes how a single objective is addressed
	in a design, and a primary model describes how core functionality
	requirements are addressed. In order to analyze the interactions
	between aspects and primary models they must be composed. System
	developers may need to create and analyze alternative realizations
	in order to produce a design that balances competing objectives (concerns).
	Treating realizations of design objectives as aspects allows developers
	to more easily swap in and out alternative realizations in a design.
	The iterative nature of design dictates that composition and analysis
	be carried out in a flexible and intuitive manner. Composing aspects
	and primary models can produce designs with conflicting structures
	or behaviors. We have developed a twolevel structure of composition
	constraints to address this issue; a high level that identifies the
	aspects and determines the order in which they will be composed (composition
	strategy), and a lower level that constrains how a single aspect
	is composed with a primary model (composition directives). In this
	paper we describe a model composition approach that utilizes composition
	constraints. We illustrate the approach using small examples of security
	and faulttolerance aspects.},
  comment = {model weaving},
  doi = {10.1.1.87.1884},
  file = {:./process/interesse/model weaving/10.1.1.87.1884.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Georg03composingaspect,
  author = {Geri Georg and Robert France and Indrakshi Ray},
  title = {Composing Aspect Models},
  booktitle = {The 4th AOSD Modeling With \textsc{UML} Workshop},
  year = {2003},
  abstract = {Aspect-oriented modeling (AOM) techniques allow system developers
	to address pervasive objectives such as security and fault-tolerance
	separately from core functional requirements during system design.
	An aspect-oriented design model consists of a set of aspects and
	a primary model. An aspect describes how a single objective is addressed
	in a design, and a primary model describes how core functionality
	requirements are addressed. In order to analyze the interactions
	between aspects and primary models they must be composed. System
	developers may need to create and analyze alternative realizations
	in order to produce a design that balances competing objectives (concerns).
	Treating realizations of design objectives as aspects allows developers
	to more easily swap in and out alternative realizations in a design.
	The iterative nature of design dictates that composition and analysis
	be carried out in a flexible and intuitive manner. Composing aspects
	and primary models can produce designs with conflicting structures
	or behaviors. We have developed a twolevel structure of composition
	constraints to address this issue; a high level that identifies the
	aspects and determines the order in which they will be composed (composition
	strategy), and a lower level that constrains how a single aspect
	is composed with a primary model (composition directives). In this
	paper we describe a model composition approach that utilizes composition
	constraints. We illustrate the approach using small examples of security
	and faulttolerance aspects.},
  comment = {model weaving},
  doi = {10.1.1.87.1884},
  file = {:./process/interesse/model weaving/10.1.1.87.1884.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@STANDARD{aspectC,
  title = {AspeCt-oriented C Specification. Working Technical Draft,},
  institution = {Middleware Systems Research Group},
  author = {Michael Gong and H.A. Jacobsen},
  revision = {v0.8},
  month = {January},
  year = {2008},
  owner = {Thiago Gottardi},
  timestamp = {2011.04.03}
}

@STANDARD{aspectc1,
  title = {AspeCt-oriented C Specification (v0.8). Working Technical Draft},
  institution = {Middleware Systems Research Group},
  author = {W. Michael Gong and H. A. Jacobsen.},
  language = {English},
  revision = {0.8},
  month = {January},
  year = {2008},
  owner = {Thiago Gottardi},
  timestamp = {2011.03.31}
}

@INPROCEEDINGS{GottardiWasp,
  author = {Thiago Gottardi and Valter Vieira Camargo},
  title = {Melhorias em um perfil \textsc{UML} para Desenvolvimento de Software
	Orientado a Aspectos},
  booktitle = {Proc. of the II Latin American Workshop on Aspect-Oriented Software
	Development, LA-WASP'2008},
  year = {2008},
  address = {Campinas, SP - Brazil},
  month = {October},
  publisher = {SBES 2008},
  abstract = {In this paper, improvement and changes are proposed to inconsistencies
	found in an existing aspect-oriented \textsc{UML} profile. Several
	profiles can be found in the literature; however, many of them are
	still preliminary and have deficiencies about their relation to basic
	concepts of the paradigm, which are in need of deeper analysis in
	order to evaluate their efficiencies. After testing that same \textsc{UML}
	profile, several inconsistencies were discovered, and then this paper
	contains corrections to address these problems. A concern during
	the study was not to affect the profile main characteristics, such
	as being a lightweight solution. The main result of this work is
	reaching a \textsc{UML} profile for aspect-oriented programming that
	better fits into the main paradigm concepts.},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{gottardiEA,
  author = {Thiago Gottardi and Penteado, R.A.D and Camargo, V.V.},
  title = {A Process for Aspect-Oriented Plataform Specific Profile Checking},
  booktitle = {Workshop on Early Aspects, 2011. 10th International Conference on
	Aspect-Oriented Software Development -- AOSD},
  year = {2011},
  address = {Porto de Galinhas, Brasil},
  owner = {thiago},
  timestamp = {2011.02.07}
}

@INPROCEEDINGS{gottardiclei,
  author = {Thiago Gottardi and Penteado, R.A.D and Ramos, R.A and Pastor, O.L.
	and Camargo, V.V.},
  title = {Diretrizes para Avaliação e Aperfeiçoamento de Perfis UML para Sistemas
	Orientados a Aspectos},
  booktitle = {XXXVI Clei -- Conferência Latino-Americana de Informática},
  year = {2010},
  address = {Assunção, Paraguay},
  owner = {thiago},
  timestamp = {2011.02.07}
}

@INPROCEEDINGS{gottardiwasp2011,
  author = {Thiago Gottardi and Ros\^{a}ngela Dellosso Penteado and Valter Vieira
	Camargo},
  title = {A Model Based Process to Support the Reuse of Aspect-Oriented Frameworks},
  booktitle = {Proc. of the V Latin American Workshop on Aspect-Oriented Software
	Development, LA-WASP'2011},
  year = {2008},
  address = {S\~{a}o Paulo, SP - Brazil},
  month = {October},
  publisher = {CBSoft 2011},
  abstract = {In this paper, improvement and changes are proposed to inconsistencies
	found in an existing aspect-oriented \textsc{UML} profile. Several
	profiles can be found in the literature; however, many of them are
	still preliminary and have deficiencies about their relation to basic
	concepts of the paradigm, which are in need of deeper analysis in
	order to evaluate their efficiencies. After testing that same \textsc{UML}
	profile, several inconsistencies were discovered, and then this paper
	contains corrections to address these problems. A concern during
	the study was not to affect the profile main characteristics, such
	as being a lightweight solution. The main result of this work is
	reaching a \textsc{UML} profile for aspect-oriented programming that
	better fits into the main paradigm concepts.},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@PHDTHESIS{gray,
  author = {Jeffrey G. Gray},
  title = {Aspect-Oriented Domain-Specific Modeling: A Generative Approach Using
	a Meta-weaver Framework},
  school = {Ph.D. Dissertation, Department of Electrical 
	
	Engineering and Computer Science, Vanderbilt University, 
	
	Nashville, TN, March 2002},
  year = {2002},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.22}
}

@INPROCEEDINGS{Groher2004,
  author = {Iris Groher and Thomas Baumgarth},
  title = {Aspect-Orientation from Design to Code},
  booktitle = {Workshop on Early Aspects: Aspect-Oriented Requirements Engineering
	and Architecture Design, AOSD Conference},
  year = {2004},
  address = {Lancaster, UK},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.15}
}

@INPROCEEDINGS{Groher2007,
  author = {Groher, Iris and Voelter, Markus},
  title = {XWeave: models and aspects in concert},
  booktitle = {AOM '07: Proceedings of the 10th international workshop on Aspect-oriented
	modeling},
  year = {2007},
  pages = {35--40},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Model-driven software development improves the way software is developed
	by capturing key features of the system in models which are developed
	and refined as the system is created. During the system's lifecycle
	models are combined and transformed between different levels of abstraction
	and viewpoints. Aspect-oriented techniques improve software development
	by providing modularization constructs for the encapsulation of crosscutting
	concerns. Existing research has already investigated many ways of
	combining the two paradigms. This paper contributes by presenting
	XWeave, a model weaver that supports weaving of both models and meta
	models. XWeave supports the composition of different architectural
	viewpoints and eases model evolution. Furthermore, the tool plays
	an important role in software product line engineering, as variable
	parts of architectural models can be woven according to some product
	configuration. The concepts are illustrated with an example of a
	home automation system.},
  comment = {class diagram, model weaving},
  doi = {http://doi.acm.org/10.1145/1229375.1229381},
  file = {:./process/interesse/class diagrams/a6-groher.pdf:PDF},
  isbn = {978-1-59593-658-5},
  location = {Vancouver, Canada},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Guo2007,
  author = {Yanhong Guo and Guifa Teng and Yueli Li and Fang Wang and Jianbin
	Ma},
  title = {Improvement of Object-Oriented System Analysis and Design with Aspects},
  booktitle = {Proc. 31st Annual Int. Computer Software and Applications Conf. COMPSAC
	2007},
  year = {2007},
  volume = {2},
  pages = {379--384},
  __markedentry = {[Thiago Gottardi]},
  abstract = {Although there are already many researches on aspect-orientation software
	development from requirements to design and implementation, there
	is not a practical way for adapting aspects to current Object-Oriented
	System Analysis and Design (OOSA&amp;D) process. This paper presents
	a means to model crosscutting concerns based on OOSA&amp;D. The approach
	is based on use-case driven development. Aspects which present crosscutting
	concerns are identified from use-case diagram, and then aspect specification
	table is used to describe the aspects in detail. Particularly the
	presentation is independent of Aspect-Oriented Programming (AOP)
	languages and the implementation environment. The approach can help
	developers get clear system structure and facilitate system maintenance
	and upgrade. This approach is also illustrated by a case study of
	a Prison Scoring System (PSS).},
  comment = {use case},
  doi = {10.1109/COMPSAC.2007.127},
  file = {:./process/interesse/requirements usecase/4291150.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{yanhan2005,
  author = {Han, Y. and Kniesel, G. and Cremers, A.B},
  title = {Towards Visual \textsc{A}spect\textsc{J} by a Meta Model and Modeling
	Notation},
  booktitle = {6$^{th}$ Aspect-Oriented Modeling (AOM), AOSD},
  year = {2005},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.16}
}

@INPROCEEDINGS{hannen2,
  author = {Hanenberg, S. and Hirschfeld and Unland, R. and Kawamura, K},
  title = {Applying Aspect-Oriented Composition to Framework Development --
	A Case Study},
  booktitle = {Proc. of the 1st International Workshop on Foundations of Unanticipated
	Software Evolution},
  year = {2004},
  editor = {Hanenberg, S. and Hirschfeld, Unland, R. and Kawamura, K},
  address = {Barcelona, Spain},
  month = {march 28},
  owner = {Thiago Gottardi},
  timestamp = {2010.11.17}
}

@INPROCEEDINGS{Hanenberg2009,
  author = {Hanenberg, S. and Kleinschmager, S. and Josupeit-Walter, M.},
  title = {Does aspect-oriented programming increase the development speed for
	crosscutting code? An empirical study},
  booktitle = {Proc. 3rd Int. Symp. Empirical Software Engineering and Measurement
	ESEM 2009},
  year = {2009},
  pages = {156--167},
  abstract = {Aspect-oriented software development is an approach which addresses
	the construction of software artifacts that traditional software
	engineering constructs fail to modularize: the so-called crosscutting
	concerns. However, although aspect-orientation claims to permit a
	better modularization of crosscutting concerns, it is still not clear
	whether the development time for such crosscutting concerns is increased
	or decreased by the application of aspect-oriented techniques. This
	paper addresses this issue by an experiment which compares the development
	times of crosscutting concerns using traditional composition techniques
	and aspect-oriented composition techniques using the object-oriented
	programming language Java and the aspect-oriented programming language
	AspectJ. In that way, the experiment reveals opportunities and risks
	caused by aspect-oriented programming techniques in comparison to
	object-oriented ones.},
  doi = {10.1109/ESEM.2009.5316028},
  file = {:./process/interesse/metrics-complexity/05316028.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Havinga2010,
  author = {Havinga, Wilke and Bergmans, Lodewijk and Aksit, Mehmet},
  title = {A model for composable composition operators: expressing object and
	aspect compositions with first-class operators},
  booktitle = {AOSD '10: Proceedings of the 9th International Conference on Aspect-Oriented
	Software Development},
  year = {2010},
  pages = {145--156},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {A considerable amount of research, especially within the OO and AOSD
	communities, has focused on understanding the potential and limitations
	of various composition techniques. This has led to a large amount
	of proposals for alternative composition techniques, including many
	variations of message dispatch, inheritance, and aspect mechanisms.
	This paper makes the case that there is no single perfect composition
	technique that suits every situation, since different techniques
	incur different trade-offs. The proper composition technique to use
	depends on the particular design problem and its requirements (e.g.
	w.r.t. adaptability, reusability, understandability, robustness,
	etc. of the various elements of the design). However, most programming
	languages limit the available composition techniques to a very few.
	To address this, we propose a novel composition model. The model
	provides dedicated abstractions that can be used to express a wide
	variation of object composition techniques ("composition operators").
	Examples include various forms of inheritance, delegation, and aspects.
	The proposed model unifies objects (with encapsulated state and a
	message interface) and composition operators; composition operators
	are specified as first-class citizens. Multiple composition operators
	can be combined within the same application, and composition operators
	can even be used to compose new composition operators from existing
	ones. This opens new possibilities for developing domain-specific
	composition operators, taxonomies of composition operators, and for
	reuse and refinement of composition operators. To validate and experiment
	with the proposed model, we have designed and implemented a simple
	language, that we also use in this paper to show concrete examples.},
  comment = {class diagram},
  doi = {http://doi.acm.org/10.1145/1739230.1739248},
  file = {:./process/interesse/class diagrams/p145-havinga.pdf:PDF},
  isbn = {978-1-60558-958-9},
  location = {Rennes and Saint-Malo, France},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Havinga2007,
  author = {Havinga, Wilke and Nagy, Istvan and Bergmans, Lodewijk and Aksit,
	Mehmet},
  title = {A graph-based approach to modeling and detecting composition conflicts
	related to introductions},
  booktitle = {AOSD '07: Proceedings of the 6th international conference on Aspect-oriented
	software development},
  year = {2007},
  pages = {85--95},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {The goal of this paper is to model and detect composition conflicts
	related to introductions. Within this context, we identify several
	categories of composition conflicts. To analyze the causes of these
	conflicts precisely, we first model the structure of programs as
	graphs. Next, we model introductions as graph transformation rules.
	We define explicit rules to describe when composition conflicts related
	to introductions occur. We built a prototype tool that detects and
	visualizes the occurrence of such conflicts in AspectJ programs,
	making use of an existing graph analysis and rewriting tool. The
	graph-based models are generated automatically from the source code
	of Java programs and AspectJ introductions. However, our approach
	does not make strong assumptions about either the aspect or base
	language; it has been designed to be applicable to other AOP languages.},
  comment = {weaving conflicts},
  doi = {http://doi.acm.org/10.1145/1218563.1218574},
  file = {:./process/interesse/weaving conflicts/p85-havingaCONFLICTS.pdf:PDF},
  isbn = {1-59593-615-7},
  location = {Vancouver, British Columbia, Canada},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Hovsepyan2010,
  author = {Hovsepyan, Aram and Scandariato, Riccardo and Van Baelen, Stefan
	and Berbers, Yolande and Joosen, Wouter},
  title = {From aspect-oriented models to aspect-oriented code?: the maintenance
	perspective},
  booktitle = {AOSD '10: Proceedings of the 9th International Conference on Aspect-Oriented
	Software Development},
  year = {2010},
  pages = {85--96},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Aspect-Oriented Modeling (AOM) provides support for separating concerns
	at the design level. Even though most AOM approaches provide means
	to execute the composition of the modularized concerns to obtain
	a composed model, it is also possible to keep the concerns modularized
	at the implementation level by targeting an aspect-oriented platform.
	Model-driven approaches have emerged to support both alternatives
	via tools. Clearly, these choices are not equivalent. Rather, they
	have a direct impact on several dimensions, including maintainability.
	Hence, the main research problem addressed by this work is to figure
	out which alternative provides for shorter maintenance time. To answer
	this question, we have conducted a series of quantitative studies
	and experiments.},
  comment = {metrics, model weaving, use case},
  doi = {http://doi.acm.org/10.1145/1739230.1739241},
  file = {:./process/interesse/metrics-complexity/p85-hovsepyan.pdf:PDF},
  isbn = {978-1-60558-958-9},
  location = {Rennes and Saint-Malo, France},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{huang,
  author = {Huang, M. and Wang, C. and Zhang, L.},
  title = {Towards a Reusable and Generic Aspect Library},
  booktitle = {Workshop of the Aspect Oriented Software Development Conference at
	AOSDSEC'04},
  year = {2004},
  address = {Lancaster, UK},
  month = {March, 23},
  owner = {thiago},
  timestamp = {2011.02.07}
}

@INPROCEEDINGS{Iqbal2009,
  author = {Iqbal, S. and Allen, G. },
  title = {Representing Aspects in Design},
  booktitle = {Proc. Third IEEE Int. Symp. Theoretical Aspects of Software Engineering
	TASE 2009},
  year = {2009},
  pages = {313--314},
  abstract = {Aspect-oriented programming is providing a new way of handling cross-cutting
	concerns (also known as aspects) in a modularized way. A number of
	languages, such as AspectJ, Spring, and AspectWorkz, have been developed
	to weave modularized aspects with the base program. Similarly a lot
	of research has been conducted to improve the composition of aspect
	models with the primary model. Although these suggested approaches
	have improved the implementation of aspect, this paradigm is still
	lacking aspect representation in the earlier phases of software development.
	Our proposed aspect model addresses this problem and suggests a process-modeling
	approach for identifying and representing aspects throughout the
	life cycle of system development.},
  comment = {use case},
  doi = {10.1109/TASE.2009.59},
  file = {:./process/interesse/requirements usecase/5198527.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Iwashita1997,
  author = {Iwashita, Hiroaki and Nakata, Tsuneo},
  title = {Forward model checking techniques oriented to buggy designs},
  booktitle = {ICCAD '97: Proceedings of the 1997 IEEE/ACM international conference
	on Computer-aided design},
  year = {1997},
  pages = {400--404},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  abstract = {Forward model checking is an efficient symbolic model checking method
	for verifying realistic properties of sequential circuits and protocols.
	In this paper, we present the techniques that modify the order of
	state traversal on forward model checking, and that dramatically
	improve average CPU time for finding design errors. A failing property
	has to be checked again and again to analyze the bug until it is
	corrected. The techniques, therefore, can have significant impacts
	on actual verification tasks. We use a modified regular/omega-regular
	expression to represent a set of illegal state transition sequences
	of an FSM. It makes the problem clear and gives us a sense of depth-first
	traversal, not on the state space, but on the property.},
  isbn = {0-8186-8200-0},
  location = {San Jose, California, United States},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{J'unior2009,
  author = {J\'{u}nior, Jos\'{e} Uetanabara and Camargo, Valter Vieira and Chavez,
	Christina Von Flach},
  title = {\textsc{UML}-AOF: a profile for modeling aspect-oriented frameworks},
  booktitle = {AOM '09: Proceedings of the 13th workshop on Aspect-oriented modeling},
  year = {2009},
  pages = {1--6},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {The design model of an application that was developed with support
	of frameworks involves both the framework and the application design.
	This results in complex architectures represented by design models
	that are difficult to understand; because there are many framework
	characteristics which are not evident when plain \textsc{UML} is
	used. The same problem occurs with Aspect-Oriented Frameworks (AOF).
	In AOF-based development there are units which deserve attention
	from different developers -- application engineers and framework
	engineers. Besides, there are a number of architectural characteristics
	in AOFs which do not appear in Object-Oriented Frameworks. So, in
	order to make these specific characteristics clearer in the models
	we propose \textsc{UML}-AOF, an \textsc{UML} profile for designing
	AOFs. \textsc{UML}-AOF was created based on an existing \textsc{UML}
	profile for aspect-oriented programming and takes into consideration
	some AspectJ idioms, patterns and also stereotypes from a profile
	for object-oriented frameworks called \textsc{UML}-F. \textsc{UML}-AOF
	was evaluated by means of its application in the design of a persistence
	and security AOF. We observe that \textsc{UML}-AOF makes some specific
	AOF architectural characteristics clearer in design models, improving
	the understandability of the architecture as well as the behavior.},
  doi = {http://doi.acm.org/10.1145/1509297.1509299},
  isbn = {978-1-60558-451-5},
  location = {Charlottesville, Virginia, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.15}
}

@INPROCEEDINGS{J'unior2010,
  author = {J\'{u}nior, Jos\'{e} Uetanabara and Penteado, Ros\^{a}ngela Dellosso
	and de Camargo, Valter Vieira},
  title = {An overview and an empirical evaluation of \textsc{UML}-AOF: an \textsc{UML}
	profile for aspect-oriented frameworks},
  booktitle = {SAC '10: Proceedings of the 2010 ACM Symposium on Applied Computing},
  year = {2010},
  pages = {2289--2296},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {In this paper we present \textsc{UML}-AOF and an empirical evaluation
	about it. \textsc{UML}-AOF is a profile that aims to make the design
	characteristics of aspect-oriented frameworks (AOFs) more evident
	in models than standard profiles for aspect-oriented programming
	(AOP). \textsc{UML}-AOF gathers several stereotypes and tagged values
	which represent design and architectural details commonly found in
	AOFs, such as some idioms, patterns and extension mechanisms. In
	order to evaluate the applicability of this profile, an empirical
	study was conducted to analyze the number of errors and the time
	spent by software engineers using both \textsc{UML}-AOF and a conventional
	profile for AOP. Based on the collected data, we have observed that
	the number of errors as well the time spent analyzing the models
	were significantly better than using the conventional profile.},
  doi = {http://doi.acm.org/10.1145/1774088.1774564},
  isbn = {978-1-60558-639-7},
  location = {Sierre, Switzerland},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.15}
}

@INPROCEEDINGS{Jackson2004,
  author = {Andrew Jackson and Siobhan Clarke},
  title = {Towards a Generic Aspect Oriented Design Process},
  booktitle = {ACM Conference?04},
  year = {2004},
  month = {1-2},
  organization = {ACM},
  publisher = {ACM},
  abstract = {Aspect oriented design (AOD) research is fragmented. Barriers to AOD
	adoption are, in part, due to the fragmented nature of AOD research.
	Individually, many approaches provide elegant solutions to subsets
	of particular key issues which relate to AOD. Collectively, a significant
	set of these issues are addressed. We propose integrating existing
	AOD approaches through a generic AOD process. It is our intuition
	that such integration will consistently address the issues relevant
	to AOD.},
  citeseerurl = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.94.972},
  comment = {class diagram, model weaving},
  doi = {10.1.1.94.972},
  file = {:./process/interesse/class diagrams/Jackson.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@BOOK{Jacob,
  title = {Aspect-Oriented Software Development with Use Cases},
  publisher = {Addison-Wesley Professional},
  year = {2005},
  author = {Ivar Jacobson and
	
	Pan-Wei Ng},
  pages = {464},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.20}
}

@MISC{jaml,
  author = {JAML},
  title = {http://www.ics.uci.edu/~trungcn/jaml},
  howpublished = {Último acesso em 9/5/2006},
  year = {20064},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.27}
}

@INPROCEEDINGS{Jeanneret2008,
  author = {Jeanneret, C\'{e}dric and France, Robert and Baudry, Benoit},
  title = {A reference process for model composition},
  booktitle = {AOM '08: Proceedings of the 2008 AOSD workshop on Aspect-oriented
	modeling},
  year = {2008},
  pages = {1--6},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {In a Model Driven Engineering (MDE) environment, composing several
	models to produce a single integrated model is an important model
	management activity. The complex structure of models makes manual
	model composition a difficult and tedious task. This problem has
	given rise to several proposed approaches automating model composition.
	In this paper, we propose a process framework for model composition
	that can be used to compare different composition approaches. One
	of the key insights provided by the framework is that model composition
	is not an operator that can be completely automated.},
  comment = {class diagram, model weaving, use case},
  doi = {http://doi.acm.org/10.1145/1404920.1404921},
  file = {:./process/interesse/class diagrams/Jeanneret_final.pdf:PDF},
  isbn = {978-1-60558-145-3},
  location = {Brussels, Belgium},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Jiang,
  author = {Michael Jiang and Jing Zhang and David Raymer and John Strassner},
  title = {A Modeling Framework for Self-Healing Software Systems},
  booktitle = {1st International Workshop on Models@run.time in Lecture Notes in
	Computer Science, Satellite Events at the MODELS 2007 Conference},
  year = {2007},
  publisher = {Springer-Verlag},
  abstract = {For a system to be capable of self-healing, the system must
	
	be able to detect what has gone wrong and how to correct it. This
	paper
	
	presents a generic modeling framework to facilitate the development
	of
	
	self-healing software systems. A model-based approach is used to cate-
	
	gorize software failures and specify their dispositions at the model
	level.
	
	Self-healing is then achieved by transforming the model of the system
	
	into platform-specific implementation instrumented with failure detec-
	
	tion and resolution mechanisms to mitigate the effect of software
	failures
	
	and maintain the level of healthiness of the system.},
  comment = {class diagram, model weaving},
  file = {:./process/interesse/class diagrams/MRT07_Jiangl_etall.pdf:PDF},
  keys = {Autonomics, modeling, AOM, model transformation},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{johnson,
  author = {Johnson, R. E.},
  title = {Components, Frameworks, and Patterns.},
  booktitle = {Proc. of the ACM Symposium on Software Reusability, (SST' 97), Boston,
	may, 17-20},
  year = {1997},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.26}
}

@INPROCEEDINGS{Kande,
  author = {Kandé, M.M. and J. Kienzle and A. Strohmeier,},
  title = {From AOP to \textsc{UML} , A Bottom-Up Approach},
  booktitle = {Aspect-Oriented Modeling with \textsc{UML} workshop at the 1st International
	Conference on Aspect-Oriented Software Development},
  year = {2002},
  month = {April},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.21}
}

@INPROCEEDINGS{Kiczales01anoverview,
  author = {Gregor Kiczales and Erik Hilsdale and Jim Hugunin and Mik Kersten
	and Jeffrey Palm and William G. Griswold},
  title = {An Overview of AspectJ},
  year = {2001},
  pages = {327--353},
  publisher = {Springer-Verlag}
}

@INPROCEEDINGS{Kiczales97aspect-orientedprogramming,
  author = {Gregor Kiczales and John Lamping and Anurag Mendhekar and Chris Maeda
	and Cristina Lopes and Jean-marc Loingtier and John Irwin},
  title = {Aspect-oriented programming},
  booktitle = {ECOOP},
  year = {1997},
  publisher = {Springer-Verlag},
  comment = {basico},
  doi = {10.1.1.115.8660},
  file = {:./process/interesse/basico/10.1.1.115.8660.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{Kienzle2009,
  author = {Kienzle, J\"{o}rg and Al Abed, Wisam and Klein, Jacques},
  title = {Aspect-oriented multi-view modeling},
  booktitle = {AOSD '09: Proceedings of the 8th ACM international conference on
	Aspect-oriented software development},
  year = {2009},
  pages = {87--98},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Multi-view modeling allows a developer to describe a software system
	from multiple points of view, e.g. structural and behavioral, using
	different modeling notations. Aspect-oriented modeling techniques
	have been proposed to address the scalability problem within individual
	modeling notations. This paper presents RAM, an aspect-oriented modeling
	approach that provides scalable multi-view modeling. RAM allows the
	modeler to define stand-alone reusable aspect models using 3 modeling
	notations. The aspect models support the modeling of structure (using
	\textsc{UML} class diagrams) and behavior (using \textsc{UML} state
	and sequence diagrams). RAM supports aspect dependency chains, which
	allows an aspect providing complex functionality to reuse the functionality
	provided by other aspects. The RAM weaver can create woven views
	of the composed model for debugging, simulation or code generation
	purpose, as well as perform consistency checks during the weaving
	and on the woven model to detect inconsistencies of the composition.},
  comment = {class diagram, interaction diagram, model weaving},
  doi = {http://doi.acm.org/10.1145/1509239.1509252},
  file = {:./process/interesse/p87-kienzle.pdf:PDF},
  isbn = {978-1-60558-442-3},
  keywords = {aspect-oriented modeling, class diagrams, sequence
	
	diagrams, state diagrams, aspect dependencies, instantiation,
	
	binding},
  location = {Charlottesville, Virginia, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@BOOK{kiselevaop,
  title = {Aspect-Oriented Programming with AspectJ},
  publisher = {Sams},
  year = {2002},
  author = {Kiselev, I},
  pages = {288},
  edition = {1},
  month = {July},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.22}
}

@INPROCEEDINGS{Klein_reusableaspect,
  author = {Jacques Klein and Jörg Kienzle},
  title = {Reusable aspect models},
  booktitle = {Proc. of the 11th Int. Workshop on AOM 2007},
  year = {2007},
  citeseerurl = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.109.2187},
  comment = {class diagram, interaction diagram, model weaving},
  doi = {10.1.1.109.2187},
  file = {:./process/interesse/class diagrams/aom-models2007-ram.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Kojarski2005,
  author = {Kojarski, Sergei and Lorenz, David H.},
  title = {Pluggable AOP: designing aspect mechanisms for third-party composition},
  booktitle = {OOPSLA '05: Proceedings of the 20th annual ACM SIGPLAN conference
	on Object-oriented programming, systems, languages, and applications},
  year = {2005},
  pages = {247--263},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Studies of Aspect-Oriented Programming (AOP) usually focus on a language
	in which a specific aspect extension is integrated with a base language.
	Languages specified in this manner have a fixed, non-extensible AOP
	functionality. This paper argues the need for AOP to support the
	integration and use of multiple domain-specific aspect extensions
	together. We study the more general case of integrating a base language
	with a set of third-party aspect extensions for that language. We
	present a general mixin-based semantic framework for implementing
	dynamic aspect extensions in such a way that multiple, independently
	developed aspect mechanisms can be subject to third-party composition
	and work collaboratively. Principles governing the design of a collaborative
	aspect mechanism are aspectual effect exposure and implementation
	hiding.},
  comment = {formal},
  doi = {http://doi.acm.org/10.1145/1094811.1094831},
  file = {:./process/interesse/formal specifications/p247-kojarski.pdf:PDF},
  isbn = {1-59593-031-0},
  location = {San Diego, CA, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@ARTICLE{Kong2009,
  author = {Kong, Leilei and Yuan, Tao},
  title = {Use case modeling approach for early aspect acquisition},
  journal = {SIGSOFT Softw. Eng. Notes},
  year = {2009},
  volume = {34},
  pages = {1--6},
  number = {4},
  abstract = {In the recent years, use cases have been widely applied in software
	requirement engineering, and use cases have proven particularly valuable
	as part of the requirements activities of the software process. Use
	cases play more and more important roles in some modern software
	processes and methods. Early aspects are defined as crosscutting
	concerns in the early life cycle phases including the requirements
	analysis, domain analysis and architecture design phases. Use case
	modeling approach which supports the acquisition of early aspects
	is proposed. It accepted the increment and iteration development
	ideas of Unified Process. The process of use case modeling is divided
	by five iterative stages which are called initial use case, basic
	use case, detailed use case, advanced use case and extend use case.
	The approach supports the early aspects acquisition at requirements
	level, and early aspect will be captured by analysis the use case
	properties with aspect features. Modeling processes of this kind
	of approach is discussed and applying the approach to a case study
	and analysis are given. We argue that identification of early aspects
	supports effective determination of their mapping and influence of
	artifacts at later development stages.},
  address = {New York, NY, USA},
  comment = {use case},
  doi = {http://doi.acm.org/10.1145/1543405.1543417},
  file = {:./process/interesse/requirements usecase/p39-kong.pdf:PDF},
  issn = {0163-5948},
  owner = {Thiago Gottardi},
  publisher = {ACM},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Kulesza06improvingextensibility,
  author = {Uirá Kulesza and Er Alves and Ro Garcia and Carlos J. P. De Lucena
	and Paulo Borba},
  title = {Improving Extensibility of Object-Oriented Frameworks with Aspect-Oriented
	Programming},
  booktitle = {Proc. of the 9th Intl Conf. on Software Reuse (ICSR'06)},
  year = {2006},
  pages = {231--245},
  owner = {thiago},
  timestamp = {2011.03.16}
}

@INPROCEEDINGS{Kulkarni2009,
  author = {Kulkarni, Vinay and Reddy, Sreedhar},
  title = {Extending AOP with models},
  booktitle = {ISEC '09: Proceedings of the 2nd India software engineering conference},
  year = {2009},
  pages = {13--18},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Aspect-oriented programming is a promising approach to address separation
	of concerns. Aspect-oriented programming languages address the problems
	of scattering and entanglement by providing an abstraction for specifying
	cross-cutting concerns in a modular manner. The relevant aspects
	are then composed to derive the desired implementation. However,
	current aspect-oriented programming languages only allow this composition
	to be specified in terms of programming language constructs. This
	is restrictive and can only be used for simple compositions. Many
	situations in practice need a richer composition context that cannot
	be expressed using programming language constructs. Models, being
	at a higher level of abstraction and closer to the problem domain,
	can be used to capture this information. We propose an approach to
	extend aspect-oriented programming with a composition mechanism that
	can make use of the information captured in models. We also outline
	an implementation of the proposed approach. The proposed approach
	has been used to seamlessly integrate model-centric and code-centric
	development.},
  comment = {class diagram, metamodel, model weaving},
  doi = {http://doi.acm.org/10.1145/1506216.1506220},
  file = {:./process/interesse/class diagrams/p13-kulkarni.pdf:PDF},
  isbn = {978-1-60558-426-3},
  keywords = {aspect oriented programming, point-cut extension, models},
  location = {Pune, India},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@ARTICLE{aopmatch2005,
  author = {Rannivas Laddad},
  title = {AOP and Metadata -- A Perfect Match},
  journal = {AOP@WORK, IBM Digital Library},
  year = {2005},
  month = {April},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.15}
}

@BOOK{laddadaop,
  title = {AspectJ in Action: Practical Aspect-Oriented Programming},
  publisher = {Manning Publications},
  year = {2003},
  author = {Laddad, R.},
  pages = {512},
  month = {July},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.22}
}

@INPROCEEDINGS{lazanha,
  author = {Lazanha, R. and Oliveira, A. and Penteado, R.A.D and Ramos, R.A and
	Pastor, O.L. and Camargo, V.V.},
  title = {Uma Arquitetura de Referência Baseada em Papéis Para Frameworks Transversais
	de 
	
	Persistência: Uma Análise Quantitativa},
  booktitle = {XXXVI Clei -- Conferência Latino-Americana de Informática},
  year = {2010},
  address = {Assunção, Paraguay},
  owner = {thiago},
  timestamp = {2011.02.07}
}

@INPROCEEDINGS{Lengyel2009,
  author = {Lengyel, L. and Levendovszky, T. and Angyal, L.},
  title = {Identification of crosscutting constraints in metamodel-based model
	transformations},
  booktitle = {Proc. IEEE EUROCON 2009 EUROCON '09},
  year = {2009},
  pages = {359--364},
  abstract = {This Model-Driven Development (MDD) facilitates the synthesis of application
	programs from models created using customized, domain-specific model
	processors. Model compilers can be realized by graph rewriting-based
	model transformation. In Visual Modeling and Transformation System
	(VMTS), metamodel-based rewriting rules facilitate to assign OCL
	constraints to model transformation rules. This approach supports
	validated model transformation. Unfortunately, the validation introduces
	a new concern that often crosscuts the functional concern of the
	transformation rules. To separate these concerns, an aspect-oriented
	solution is applied for constraint management. This paper introduces
	the identification method of the crosscutting constraints in metamodel-based
	model transformation rules. The presented algorithms facilitate the
	better understanding of the transformation, their easier constraint-based
	configuration, and make both the constraints and the rewriting rules
	reusable.},
  comment = {metamodel,model weaving},
  doi = {10.1109/EURCON.2009.5167656},
  file = {:./process/interesse/model weaving/5167656.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{lions,
  author = {Lions, J.M. and Simoneau, D. and Pilette, G. and Moussa, I.},
  title = {Extending OpenTool/\textsc{UML} Using Metamodeling : An aspect-oriented
	programming case study},
  booktitle = {\textsc{UML}'02 2nd Workshop on 
	
	Aspect-Oriented Modeling with \textsc{UML}, 2002},
  year = {2002},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.21}
}

@INPROCEEDINGS{Lopez-Herrejon2006,
  author = {Lopez-Herrejon, Roberto and Batory, Don and Lengauer, Christian},
  title = {A disciplined approach to aspect composition},
  booktitle = {PEPM '06: Proceedings of the 2006 ACM SIGPLAN symposium on Partial
	evaluation and semantics-based program manipulation},
  year = {2006},
  pages = {68--77},
  address = {New York, NY, USA},
  abstract = {Aspect-oriented programming is a promising paradigm that challenges
	traditional notions of program modularity. Despite its increasing
	acceptance, aspects have been documented to suffer limited reuse,
	hard to predict behavior, and difficult modular reasoning. We develop
	an algebraic model that relates aspects to program transformations
	and uncovers aspect composition as a significant source of the problems
	mentioned. We propose an alternative model of composition that eliminates
	these problems, preserves the power of aspects, and lays an algebraic
	foundation on which to build and understand AOP tools.},
  comment = {formal},
  doi = {http://doi.acm.org/10.1145/1111542.1111554},
  file = {:./process/interesse/formal specifications/p68-lopez-herrejon.pdf:PDF},
  isbn = {1-59593-196-1},
  location = {Charleston, South Carolina},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Mahoney2007,
  author = {Mahoney, Mark and Elrad, Tzilla},
  title = {Generating Code from Scenario and State Based Models to Address Crosscutting
	Concerns},
  booktitle = {SCESM '07: Proceedings of the Sixth International Workshop on Scenarios
	and State Machines},
  year = {2007},
  pages = {3},
  address = {Washington, DC, USA},
  publisher = {IEEE Computer Society},
  abstract = {Core application concerns are often modeled using either scenarios
	or state machines. Crosscutting concerns can also be modeled using
	either scenarios or state machines. Both scenario and state machine
	models can be used to generate code. When core and crosscutting concern
	models are the same type it is relatively straightforward to weave
	them together and generate code. However, when they are of dissimilar
	types a new approach must be taken. This paper describes how a core
	concern modeled as a scenario can be used with a crosscutting concern
	modeled with a state machine (and vice versa) to generate code.},
  doi = {http://dx.doi.org/10.1109/SCESM.2007.2},
  isbn = {0-7695-2958-5},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Mahoney05weavingcrosscutting,
  author = {M Mahoney and T Elrad},
  title = {Weaving crosscutting concerns into Live Sequence Charts using the
	Play-Engine},
  booktitle = {In 7th Int. Workshop on Aspect-Oriented Modeling},
  year = {2005},
  pages = {2},
  abstract = {Modeling reactive systems may benefit from using scenarios.
	
	Scenarios, like \textsc{UML} use cases, describe typical interactions
	a user
	
	has with the system. Scenario based languages model these
	
	interactions. The Live Sequence Chart language is a visual
	
	scenario based language to model reactive systems. This position
	
	paper addresses crosscutting concerns in scenarios using the Live
	
	Sequence Chart language and an accompanying tool called the
	
	Play Engine. The benefits are the ability to handle crosscutting
	
	concerns and the ability to see the effects of aspect-orientation
	on
	
	scenario based designs},
  comment = {class diagram,interaction diagram, model weaving},
  file = {:./process/interesse/class diagrams/Mahoney.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Marot2009a,
  author = {Marot, Antoine},
  title = {Preserving the separation of concerns while composing aspects on
	shared joinpoints},
  booktitle = {OOPSLA '09: Proceeding of the 24th ACM SIGPLAN conference companion
	on Object oriented programming systems languages and applications},
  year = {2009},
  pages = {837--838},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Aspect-oriented programming (AOP) is a programming paradigm which
	makes possible the separation of crosscutting concerns in different
	modules (the aspects). AOP is known to have issues when aspects are
	composed in a base program. Several approaches have been proposed
	to address these issues but they break the inherent separation of
	concerns. In this proposal, we describe a dissertation research plan
	to elaborate composition techniques while preserving the separation
	of concerns. The approach we adopt is based on an independent semantic
	annotation of the aspects to detect and resolve conflicts at runtime.},
  comment = {weaving conflicts},
  doi = {http://doi.acm.org/10.1145/1639950.1640039},
  file = {:./process/interesse/weaving conflicts/p837-marot.pdf:PDF;:./process/interesse/weaving conflicts/p759-marot-1.pdf:PDF},
  isbn = {978-1-60558-768-4},
  location = {Orlando, Florida, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Marot2010,
  author = {Marot, Antoine and Wuyts, Roel},
  title = {Composing aspects with aspects},
  booktitle = {AOSD '10: Proceedings of the 9th International Conference on Aspect-Oriented
	Software Development},
  year = {2010},
  pages = {157--168},
  address = {New York, NY, USA},
  publisher = {ACM},
  __markedentry = {[Thiago Gottardi]},
  abstract = {Aspect-oriented programming languages modularize crosscutting concerns
	by separating the concerns from a base program in aspects. What they
	do not modularize well is the code needed to manage interactions
	between the aspects themselves. Therefore aspects cannot always be
	composed with other aspects without requiring invasive modifications.
	This paper proposes a join point model that makes it possible to
	express aspect composition itself as an aspect, liberating the composed
	aspects from composition-specific code. We have implemented this
	new join point model in our Oarta language, an extension of AspectJ,
	and we show how to use it to write aspects that manage aspect interactions.},
  comment = {weaving conflicts},
  doi = {http://doi.acm.org/10.1145/1739230.1739249},
  file = {:./process/interesse/weaving conflicts/p157-marot.pdf:PDF},
  isbn = {978-1-60558-958-9},
  location = {Rennes and Saint-Malo, France},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Marot2009,
  author = {Marot, Antoine and Wuyts, Roel},
  title = {Detecting unanticipated aspect interferences at runtime with compositional
	intentions},
  booktitle = {RAM-SE '09: Proceedings of the Workshop on AOP and Meta-Data for
	Software Evolution},
  year = {2009},
  pages = {1--5},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Aspect-oriented software development (AOSD) is a technique that helps
	software evolution by separating different concerns in different
	aspects and advices. Unfortunately, it still suffers from well-known
	composition issues, in particular from runtime interferences between
	advices. Much work has been done so far in order to solve such interferences,
	but most approaches rely on global predicates or variables that are
	defined by one aspect and then referred to by other aspects. As a
	consequence, an aspect has to be somehow aware of all other aspects
	in order to detect possible conflicts. This threatens the separation
	of concerns principle and therefore the benefits of AOSD for software
	evolution as well. This paper proposes an advice annotation mechanism,
	called compositional intentions, that respects the separation of
	concerns principle and allows the detection of semantic interferences
	at runtime.},
  comment = {test debug},
  doi = {http://doi.acm.org/10.1145/1562860.1562863},
  file = {:./process/interesse/test debug/a3-marot.pdf:PDF},
  isbn = {978-1-60558-548-2},
  location = {Genova, Italy},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Marot2008,
  author = {Marot, Antoine and Wuyts, Roel},
  title = {Composability of aspects},
  booktitle = {SPLAT '08: Proceedings of the 2008 AOSD workshop on Software engineering
	properties of languages and aspect technologies},
  year = {2008},
  pages = {1--6},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {The goal of the SPLAT workshop is to investigate insofar the software
	engineering '-ilities' are being addressed by aspect-oriented programming.
	This paper looks closer at one of these properties (composability
	of aspects), which is closely coupled to evolvability, comprehensibility
	and modularity. It discusses problems that can arise when composing
	(independently developed) aspects, investigates some existing approaches
	that deal with composing aspects, and their advantages and disadvantages.
	It then outlines our own aspect composition model, which is discussed
	in more detail in a submission to another workshop.},
  comment = {class diagram, weaving conflicts},
  doi = {http://doi.acm.org/10.1145/1408647.1408652},
  file = {:./process/interesse/class diagrams/a5-marot.pdf:PDF},
  isbn = {978-1-60558-144-6},
  location = {Brussels, Belgium},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Marot2008a,
  author = {Marot, Antoine and Wuyts, Roel},
  title = {A DSL to declare aspect execution order},
  booktitle = {DSAL '08: Proceedings of the 2008 AOSD workshop on Domain-specific
	aspect languages},
  year = {2008},
  pages = {1--5},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Composing aspects is known to be problematic since unpredicted aspect
	interactions may appear and may lead to erroneous weaved programs.
	This paper focuses on one of these issues: the advice ordering around
	a join point. It views aspect composition issues as a crosscutting
	concern that should be handled by a composition aspect. It proposes
	a domain-specific declarative aspect composition language for composing
	aspects, and applies it on a number of examples.},
  comment = {class diagram, formal},
  doi = {http://doi.acm.org/10.1145/1404927.1404934},
  file = {:./process/interesse/class diagrams/a7-marot.pdf:PDF},
  isbn = {978-1-60558-146-0},
  location = {Brussels, Belgium},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Marques2008,
  author = {Andr\'{e} Gon\c{c}alves Marques and Ana Moreira and Jo\{a}o Ara\'{u}jo},
  title = {Multi-dimensional composition by objective in aspect-oriented requirements
	analysis},
  booktitle = {EA '08: Proceedings of the 13th international workshop on Early Aspects},
  year = {2008},
  pages = {19--26},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {This paper focuses on composition of requirements artefacts in Aspect-Oriented
	Requirements Engineering (AORE). Our goal is to equip the Aspect-Oriented
	Requirements Analysis (AORA) approach [1, 2] with an enhanced composition
	mechanism. The AORA approach consists in the identification, modularization
	and composition of crosscutting concerns. But the AORA composition
	[3] operates at a coarser granularity level and its reduced number
	of operators results in limited composition expressiveness. The core
	of the work presented in this paper is the description of a composition
	language and approach that enables a multi-dimensional composition
	of artefacts based on Objectives, therefore stating the purpose or
	the goal of the composition. This approach provides a composition
	process with a well-defined syntax and semantics, as well as a tool
	support integrated to the AORA original tool [3, 4].},
  comment = {activity diagram, formal},
  doi = {http://doi.acm.org/10.1145/1370828.1370834},
  file = {:./process/interesse/activity diagram/p19-marques.pdf:PDF},
  isbn = {978-1-60558-032-6},
  location = {Leipzig, Germany},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{McNeile2008,
  author = {McNeile, Ashley and Roubtsova, Ella},
  title = {CSP parallel composition of aspect models},
  booktitle = {AOM '08: Proceedings of the 2008 AOSD workshop on Aspect-oriented
	modeling},
  year = {2008},
  pages = {13--18},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {We present an approach to aspect specification based on the Protocol
	Modelling paradigm, which uses CSP parallel composition as the mechanism
	for combining partial behaviour specifications. Using the Protocol
	Modelling approach enables local reasoning about the behaviour of
	the whole model based on knowledge of behaviour of the composed aspects,
	and we present the proof of this key property in this paper. We describe
	how Protocol Modelling allows the definition of aspect join points
	and weaving relationships at the model level, and how different aspects
	may use different abstractions over the same domain. We illustrate
	this using a small case example.},
  comment = {formal, state diagram},
  doi = {http://doi.acm.org/10.1145/1404920.1404923},
  file = {:./process/interesse/formal specifications/Roubtsova_final.pdf:PDF},
  isbn = {978-1-60558-145-3},
  location = {Brussels, Belgium},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@MASTERSTHESIS{anamarisa,
  author = {Ana Luisa Ferreira de Medeiros},
  title = {MARISA-MDD: Uma Abordagem para Transformações entre Modelos Orientados
	a Aspectos: dos Requisitos ao Projeto Detalhado},
  school = {Universidade Federal do Rio Grande do Norte},
  year = {2008},
  owner = {thiago},
  timestamp = {2011.02.17}
}

@ARTICLE{Milner78atheory,
  author = {Robin Milner},
  title = {A theory of type polymorphism in programming},
  journal = {Journal of Computer and System Sciences},
  year = {1978},
  volume = {17},
  pages = {348--375},
  comment = {basico},
  doi = {10.1.1.67.5276},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{Mortensen_creatingpluggable,
  author = {Michael Mortensen and Sudipto Ghosh},
  title = {Creating pluggable and reusable non-functional aspects in \textsc{A}spect\textsc{C}++},
  booktitle = {Proceedings of the Fifth AOSD Workshop on Aspects, Components, and
	Patterns for Infrastructure Software},
  year = {2006},
  owner = {Thiago Gottardi},
  timestamp = {2011.02.19}
}

@INPROCEEDINGS{mortegosh,
  author = {Michael Mortensen and Sudipto Gosh},
  title = {Using Aspects with Object-Oriented Frameworks},
  booktitle = {Proceedings of the Aspect-Oriented Software Development Conference
	-- industry track},
  year = {2006},
  address = {Bonn, Alemanha},
  owner = {Thiago Gottardi},
  timestamp = {2011.02.19}
}

@INPROCEEDINGS{1404924,
  author = {Mosconi, Marco and Charfi, Anis and Svacina, Jaroslav and Wloka,
	Jan},
  title = {Applying and evaluating AOM for platform independent behavioral \textsc{UML}
	models},
  booktitle = {AOM '08: Proceedings of the 2008 AOSD workshop on Aspect-oriented
	modeling},
  year = {2008},
  pages = {19--24},
  address = {New York, NY, USA},
  publisher = {ACM},
  comment = {activity diagram, class diagram, model weaving},
  doi = {http://doi.acm.org/10.1145/1404920.1404924},
  file = {:./process/interesse/activity diagram/Svacina_final - Cópia.pdf:PDF},
  isbn = {978-1-60558-145-3},
  location = {Brussels, Belgium},
  owner = {Thiago Gottardi},
  review = {Severalapproachesforaspect-orientedmodeling(AOM)have
	
	beendevelopedtomodularizecrosscuttingconcernsprop-
	
	erlyin\textsc{UML}models.Inthispositionpaperwepresenta
	
	combinationofAOMapproachesandshowhowtheycanbe
	
	appliedinamodel-drivenprocesstargetingbusinessapplica-
	
	tions.Wepresenta\textsc{UML}2proleforplatformindependent
	
	AOMwithadvancedpointcutexpressionsandacorrespond-
	
	ingmodelweavingmechanismforbehaviormodelsusing
	
	\textsc{UML}2Actions.Weshowthataseamlessintegrationof
	
	aspect-orientedconceptsintoanexistingmodel-drivenpro-
	
	cesscanbeachievedeasilywithstate-of-the-arttechnology.
	
	Weappliedourapproachinthecontextofanindustrialcase
	
	studyandperformedanevaluationthatshowsasignicantly
	
	improvedunderstandabilityandmaintainabilityofplatform
	
	independentmodelsusingaspects.},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{mostefaf,
  author = {Mostefaoui , F. and Vachon, J},
  title = {Formalization of an aspect-oriented modeling approach},
  booktitle = {Proceedings of Formal Methods 2006. Hamilton, ON},
  year = {2006},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.22}
}

@INPROCEEDINGS{Mussbacher2007,
  author = {Mussbacher, G. and Amyot, D. and Araujo, J. and Moreira, A. and Weiss,
	M.},
  title = {Visualizing Aspect-Oriented Goal Models with AoGRL},
  booktitle = {Proc. Second Int. Workshop Requirements Engineering Visualization
	REV 2007},
  year = {2007},
  pages = {1},
  abstract = {As goal models can be large and complex even for small problems, it
	is often a challenge to aptly visualize them and to efficiently structure
	them for maintenance and reuse activities. The Goal-oriented Requirement
	Language (GRL) based on i* and the Non- Functional Requirements (NFR)
	Framework is no exception regarding these challenges. We argue that
	new ways of visualizing GRL goal models are needed and propose to
	use Aspect-oriented GRL (AoGRL) to improve the current structure
	of GRL models and their visualization. The paper presents a case
	study to evaluate the modularity, understandability, reusability,
	maintainability, and scalability of AoGRL models compared to GRL
	models. The evaluation is carried out based on metrics adapted from
	literature. The evaluation suggests that AoGRL models are more scalable
	than GRL models and exhibit better modularity, under standability,
	reusability, and maintainability.},
  comment = {formal, metrics},
  doi = {10.1109/REV.2007.11},
  file = {:./process/interesse/formal specifications/4579824.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Mussbacher2006,
  author = {Mussbacher, G. and Amyot, D. and Weiss, M.},
  title = {Visualizing Aspect-Oriented Requirements Scenarios with Use Case
	Maps},
  booktitle = {Proc. First Int. Workshop Requirements Engineering Visualization
	REV '06},
  year = {2006},
  pages = {4},
  abstract = {The benefits of aspects and aspect-oriented modelling are beginning
	to be recognized for requirements engineering activities. However,
	once aspects have been identified, the behaviour, structure, and
	pointcut expressions of aspects need to be modeled unobtrusively
	at the requirements level, allowing the engineer to seamlessly focus
	either on the behaviour and structure of the system without aspects
	or on the combined behaviour and structure. Furthermore, the modeling
	techniques for aspects should be the same as for the base system,
	ensuring that the engineer continues to work with familiar models.
	This position paper describes how, with the help of Use Case Maps,
	scenario- based aspects can be modeled visually and unobtrusively
	at the requirements level and with the same techniques as for non-aspectual
	systems. With Use Case Maps, aspects including pointcut expressions
	are modeled in a visual way which is generally considered the preferred
	choice for models of a high level of abstraction.},
  comment = {formal, use case},
  doi = {10.1109/REV.2006.9},
  file = {:./process/interesse/formal specifications/4026785.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Nemuraite2007,
  author = {Nemuraite, Lina and Balandyte, Milda},
  title = {Aspect-Oriented Use Cases and Crosscutting Interfaces for Reconfigurable
	Behavior Modeling},
  booktitle = {Proceeding of the 2007 conference on Databases and Information Systems
	IV},
  year = {2007},
  pages = {189--202},
  address = {Amsterdam, The Netherlands, The Netherlands},
  publisher = {IOS Press},
  abstract = {Aspect-oriented development has become one of the most intensively
	investigated themes in software development. In this paper, the method
	is proposed for reconfigurable modeling of aspect-oriented information
	system when <<Core>> and <<Aspect>> concerns may be represented separately
	and combined in different ways without changing their models or implementation.
	<<Aspect>> concerns are consistently represented during development
	process starting from <<Aspect>> use cases till crosscutting interfaces
	and templates for tailoring aspects for specific contexts. Examples
	from IT-Europe project are given where aspect-oriented concepts were
	used for modeling behavior of software agents performing self-management
	functionality of IT Knowledge Portal. The work is supported by Lithuanian
	State Science and Studies Foundation according to Eureka programme
	project &#8220;IT-Europe&#8221; (Reg. No 3473).},
  isbn = {978-1-58603-715-4},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Oldevik2008,
  author = {Oldevik, Jon},
  title = {Can aspects model product lines?},
  booktitle = {EA '08: Proceedings of the 2008 AOSD workshop on Early aspects},
  year = {2008},
  pages = {1--8},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {We address how product line modelling can be supported by aspects
	at the architectural level and discuss the different uses and effects
	these aspects have on the product configuration. We show that aspects
	can be useful both for modularising the architecture and the feature
	configuration of a product line. We describe a product line resolution
	process based on feature composition and show how this can be implemented
	in configuration and weaving transformations.},
  comment = {model weaving, product line},
  doi = {http://doi.acm.org/10.1145/1404946.1404949},
  file = {:./process/interesse/model weaving/a3-oldevik.pdf:PDF},
  isbn = {978-1-60558-143-9},
  location = {Brussels, Belgium},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Oldevik2009,
  author = {Oldevik, Jon and Haugen, \Oystein},
  title = {From sequence diagrams to Java-stairs aspects},
  booktitle = {AOSD '09: Proceedings of the 8th ACM international conference on
	Aspect-oriented software development},
  year = {2009},
  pages = {99--110},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Execution traces are naturally represented at the design level with
	\textsc{UML} sequence diagrams. During a system execution, trace-based
	aspects can be used to monitor behavioral patterns and protocols
	and may e.g. provide mitigation strategies for unwanted behavior.
	Trace-based and stateful aspects have evolved to handle such reoccurring
	interaction patterns at the implementation level. We define a STAIRS-inspired
	semantics for trace-based Java aspects, and a sequence diagram aspect
	notation with a mapping to a trace-based Java implementation. We
	use this to show that aspect composition is semantics preserving
	with respect to refinement under the given semantics.},
  comment = {interaction diagram},
  doi = {http://doi.acm.org/10.1145/1509239.1509253},
  file = {:./process/interesse/model weaving/p99-oldevik.pdf:PDF;:./process/interesse/interaction diagrams/p99-oldevik.pdf:PDF},
  isbn = {978-1-60558-442-3},
  keywords = {sequence diagram aspects, trace=based aspects, refinement},
  location = {Charlottesville, Virginia, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@ARTICLE{Oliveira:2011:RET:2039458.2039832,
  author = {Oliveira, Toacy C. and Alencar, Paulo and Cowan, Don},
  title = {ReuseTool-An extensible tool support for object-oriented framework
	reuse},
  journal = {J. Syst. Softw.},
  year = {2011},
  volume = {84},
  pages = {2234--2252},
  number = {12},
  month = dec,
  acmid = {2039832},
  address = {New York, NY, USA},
  doi = {10.1016/j.jss.2011.06.030},
  issn = {0164-1212},
  issue_date = {December, 2011},
  keywords = {Object-oriented framework, Software process, Software reuse, UML},
  numpages = {19},
  publisher = {Elsevier Science Inc.},
  url = {http://dx.doi.org/10.1016/j.jss.2011.06.030}
}

@ARTICLE{Oliveira:2007:RLF:1290192.1290220,
  author = {Oliveira, Toacy C. and Alencar, Paulo S. C. and de Lucena, Carlos
	J. P. and Cowan, Donald D.},
  title = {\textsc{RDL}: A language for framework instantiation representation},
  journal = {J. Syst. Softw.},
  year = {2007},
  volume = {80},
  pages = {1902--1929},
  month = {November},
  acmid = {1290220},
  address = {New York, NY, USA},
  doi = {10.1016/j.jss.2007.01.005},
  issn = {0164-1212},
  issue = {11},
  keywords = {Model driven architecture, Object oriented framework, Product line
	architecture, Software reuse},
  numpages = {28},
  owner = {Thiago Gottardi},
  publisher = {Elsevier Science Inc.},
  timestamp = {2011.04.03},
  url = {http://portal.acm.org/citation.cfm?id=1290192.1290220}
}

@STANDARD{MDAI,
  title = {Overview and guide to \textsc{OMG}'s architecture},
  organization = {Object Management Group},
  institution = {Disponível em: http://www.omg.org/cgi-bin/doc?omg/03-06-01. Acessado
	em Agosto 2010},
  author = {OMG},
  language = {English},
  howpublished = {http://www.omg.org/cgi-bin/doc?omg/03-06-01},
  revision = {2.3},
  address = {http://www.omg.org/cgi-bin/doc?omg/03-06-01},
  month = {May},
  year = {2010},
  url = {http://www.omg.org/cgi-bin/doc?omg/03-06-01},
  edition = {2.3},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.12}
}

@STANDARD{UMLI,
  title = {Unified Modeling Language Infrastructure Specification},
  organization = {Object Management Group},
  institution = {Disponível em: http://www.omg.org/spec/\textsc{UML}/2.3/Infrastructure/PDF/.
	Acessado em Agosto 2010},
  author = {OMG},
  language = {English},
  howpublished = {http://www.omg.org/spec/\textsc{UML}/2.3/Infrastructure/PDF/},
  revision = {2.3},
  address = {http://www.omg.org/spec/\textsc{UML}/2.3/Infrastructure/PDF/},
  month = {May},
  year = {2010},
  url = {http://www.omg.org/spec/\textsc{UML}/2.3/Infrastructure/PDF/},
  edition = {2.3},
  file = {:./process/interesse/10-05-03.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.12}
}

@STANDARD{UMLOCL,
  title = {UML OCL 2.0 Adopted Specification.},
  organization = {Object Management Group},
  institution = {Disponível em: http://www.omg.org/docs/ptc/03-10-14.pdf. Acessado
	em 18 de maio de 2009.},
  author = {OMG},
  language = {English},
  howpublished = {http://www.omg.org/docs/ptc/03-10-14.pdf},
  revision = {2.0},
  address = {http://www.omg.org/docs/ptc/03-10-14.pdf},
  month = {May},
  year = {2010},
  url = {http://www.omg.org/docs/ptc/03-10-14.pdf},
  edition = {2.3},
  file = {:./process/interesse/10-05-03.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.12}
}

@BOOK{1296153,
  title = {Model-Driven Architecture in Practice: A Software Production Environment
	Based on Conceptual Modeling},
  publisher = {Springer-Verlag New York},
  year = {2007},
  author = {Pastor, Oscar and Molina, Juan Carlos},
  address = {Secaucus, NJ, USA},
  isbn = {3540718672}
}

@INPROCEEDINGS{Pawlak,
  author = {Pawlak, R. and Duchien, L. and Florin, G and Legond-Aubry, F. and
	Seinturier, L. and Martelli, L.},
  title = {A \textsc{UML} Notation for Aspect Oriented Software Design},
  booktitle = {Proc. of 1st International Workshop on Aspect Oriented Modeling with
	\textsc{UML}. 1st International Conference on Aspect-Oriented Software
	
	
	Development (AOSD). Enschede, Netherlands},
  year = {2002},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.21}
}

@INPROCEEDINGS{Penim2010,
  author = {Penim, Ana Sofia and Ara\'{u}jo, Jo\, {a}o},
  title = {Identifying and modeling aspectual scenarios with theme and MATA},
  booktitle = {SAC '10: Proceedings of the 2010 ACM Symposium on Applied Computing},
  year = {2010},
  pages = {287--291},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Aspect-oriented requirements engineering emerged to deal with crosscutting
	requirements. There are several aspect-oriented requirements approaches,
	such as Theme and MATA. Through the Theme approach, one can identify
	a set of actions associated to verbs present in requirements documentation,
	which are then analyzed in order to identify crosscutting behaviors,
	i.e., potential aspectual scenarios. However, the Theme's composition
	mechanism is not expressive enough even when dealing with analysis
	models. The MATA approach can overlap this point with its powerful
	composition mechanisms, based on graph transformations that use \textsc{UML}
	models, in particular behavioral models. These models express scenarios
	that constitute a very popular and used technique to specify a system's
	behavior. Although, MATA is well-succeeded approach to specify aspectual
	behavior, it does not provide enough mechanisms to identify (aspectual)
	scenarios. Also, it does not identify negative scenarios, i.e., unexpected
	situations, making their treatment more manageable using aspect-orientation.
	All these scenarios could be identified with Theme and refined with
	MATA. This paper describes an approach that can be seen as a synergy
	between these two complementary techniques, where identification,
	modularization, specification and composition of aspectual behavior
	is realized in a seamless and systematic way.},
  comment = {interaction diagram, model weaving, use case},
  doi = {http://doi.acm.org/10.1145/1774088.1774149},
  file = {:./process/interesse/interaction diagrams/p287-penim.pdf:PDF},
  isbn = {978-1-60558-639-7},
  location = {Sierre, Switzerland},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Petriu2007,
  author = {Petriu, D. C. and Woodside, C. M. and Petriu, D. B. and Xu, J. and
	Israr, T. and Georg, Geri and France, Robert and Bieman, James M.
	and Houmb, Siv Hilde and J\"{u}rjens, Jan},
  title = {Performance analysis of security aspects in \textsc{UML} models},
  booktitle = {WOSP '07: Proceedings of the 6th international workshop on Software
	and performance},
  year = {2007},
  pages = {91--102},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {The focus of the paper is on the analysis of performance effects of
	different security solutions modeled as aspects in \textsc{UML}.
	Aspect oriented modeling (AOM) allows software designers to isolate
	and separately address solutions for crosscutting concerns, which
	are defined as distinct \textsc{UML} aspect models, then are composed
	with the primary \textsc{UML} model of the system under development.
	For performance analysis we use techniques developed previously in
	the PUMA project, which take as input \textsc{UML} models annotated
	with the standard \textsc{UML} Profile for Schedulability, Performance
	and Time (SPT), and transform them first into Core Scenario Model
	(CSM) and then into different performance models. The contribution
	of this paper is in performing the composition of the aspects with
	the primary model at the CSM level. The input is represented by the
	primary model and a number of aspect models in \textsc{UML}+SPT,
	which are processed as follows: a) converted separately to CSM; b)
	composed into a single CSM model; c) transformed into a Layered Queueing
	Networks (LQN) model and d) analyzed. The proposed approach is illustrated
	with a case study based on two standards, TPC-W and SSL.},
  comment = {class diagram, interaction diagrams, model weaving},
  doi = {http://doi.acm.org/10.1145/1216993.1217010},
  file = {:./process/interesse/class diagrams/p91-petriu.pdf:PDF},
  isbn = {1-59593-297-6},
  keywords = {Software Performance Engineering, Aspect-Oriented Modeling,
	
	Security, Model transformations, \textsc{UML}},
  location = {Buenes Aires, Argentina},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Pinto2003,
  author = {Pinto, M\'{o}nica and Fuentes, Lidia and Troya, Jose Mar\'{\i}a},
  title = {DAOP-ADL: an architecture description language for dynamic component
	and aspect-based development},
  booktitle = {GPCE '03: Proceedings of the 2nd international conference on Generative
	programming and component engineering},
  year = {2003},
  pages = {118--137},
  address = {New York, NY, USA},
  publisher = {Springer-Verlag New York, Inc.},
  abstract = {Architecture description languages deal with the description, analysis
	and reuse of software architectures. This paper describes DAOP-ADL,
	a component- and aspect-based language to specify the architecture
	of an application in terms of components, aspects and a set of plug-compatibility
	rules between them. With the aim of connecting the specification
	of the application architecture to the implementation, we describe
	our language using XML and XML Schemas. The DAOP-ADL language was
	designed to be interpreted by DAOP, our own dynamic component- and
	aspect-oriented platform. DAOP provides a composition mechanism that
	plugs aspects into components dynamically at runtime. The software
	architect will use the DAOP-ADL language at design time to describe
	the architecture of the application. Later this architectural information
	is loaded into the DAOP platform, which needs it to establish the
	dynamic connections between autonomous components and aspects. Therefore,
	the use of DAOP-ADL closes the gap between design and implementation
	of component- and aspect-based applications.},
  comment = {formal},
  file = {:./process/interesse/formal specifications/p118-pinto.pdf:PDF},
  isbn = {3-540-20102-5},
  location = {Erfurt, Germany},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Pinto2009a,
  author = {Pinto, M. and Fuentes, L. and Valenzuela, J. A. and Pires, P. F.
	and Delicato, F. C.},
  title = {Promoting the software evolution in AOSD with early aspects: Architecture-oriented
	model-based pointcuts},
  booktitle = {Proc. ICSE Workshop Aspect-Oriented Requirements Engineering and
	Architecture Design EA '09},
  year = {2009},
  pages = {31--37},
  abstract = {Aspect oriented systems suffer from an issue named pointcut fragility
	problem, which occurs when a poincut unintentionally captures or
	misses a given join point as a consequence of apparently harmless
	modifications of the base elements or system structure. One promising
	approach to cope with this problem is the definition of pointcuts
	in terms of elements of an intermediary conceptual model. In this
	paper we investigate the benefits of defining these conceptual models
	at early stages of the development. Concretely, we use the AO-ADL
	architectural language and, in particular, its support to define:
	(1) semantics-based compositions, and (2) parameterized architectural
	templates. We also demonstrate the feasibility of our approach through
	a case study.},
  comment = {model weaving, use case},
  doi = {10.1109/EA.2009.5071581},
  file = {:./process/interesse/model weaving/05071581.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Pinto2009,
  author = {Pinto, M. and Fuentes, L. and Valenzuela, J. A. and Pires, P. F.
	and Delicato, F. C. and Marinho, E.},
  title = {On the need of architectural patterns in AOSD for software evolution},
  booktitle = {Proc. \& European Conf Software Architecture Software Architecture.
	WICSA/ECSA 2009. Joint Working IEEE/IFIP Conf},
  year = {2009},
  pages = {245--248},
  abstract = {One promising approach to tackle software evolution in AOSD is model-based
	pointcuts, where pointcuts are defined in terms of elements of a
	conceptual model, which are less susceptible to evolution than elements
	of the base model. We propose the definition of model-based pointcuts
	at the architectural level and identify three layers in the definition
	of our conceptual model: the system, the domain-specific and the
	application-specific layer. An MDD process drives the definition
	of conceptual and aspect models, their instantiation and composition.
	AO-ADL is used to implement it.},
  comment = {formal, model weaving},
  doi = {10.1109/WICSA.2009.5290811},
  file = {:./process/interesse/formal specifications/5290811.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INBOOK{pree,
  chapter = {Hot-Spot-Driven Development},
  pages = {p. 379-393},
  title = {M. Fayad, R. Johnson, D. Schmidt. Building Application Frameworks:
	Object-Oriented Foundations of Framework Design},
  publisher = {John Willey and Sons},
  year = {1999},
  author = {Pree, W.},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.27}
}

@INPROCEEDINGS{Prehofer2006,
  author = {Prehofer, Christian},
  title = {Semantic reasoning about feature composition via multiple aspect-weavings},
  booktitle = {GPCE '06: Proceedings of the 5th international conference on Generative
	programming and component engineering},
  year = {2006},
  pages = {237--242},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {In this paper, we consider semantic refinement for feature-oriented
	programming where components are built from features and weavings,
	which we use to adapt one feature to the context of another one.
	We address the question of semantic reasoning about multiple weavings.
	If we know the effect of feature A on X and of feature B on X, what
	can we conclude about adding both A and B to X? For this, we define
	conservative weavings which do not modify the state of another feature.
	We show that composition of several such weavings is however not
	compositional as it does not preserve semantics. In particular, weavings
	must consider that other weavings have already been applied. This
	explains why it is considerably more difficult to reason about multiple
	aspect weavings. We show criteria on the dependencies between weavings
	which allow modular, semantics-preserving application of weavings.
	This is formalized in a calculus for feature composition and also
	extended to conditional refinements.},
  comment = {formal},
  doi = {http://doi.acm.org/10.1145/1173706.1173742},
  file = {:./process/interesse/formal specifications/p237-prehofer.pdf:PDF},
  isbn = {1-59593-237-2},
  location = {Portland, Oregon, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@BOOK{pressman,
  title = {Software Engineering: A Practitioner's Approach},
  publisher = {McGraw-Hill},
  year = {2009},
  author = {Roger S. Pressman},
  pages = {928},
  edition = {7th},
  month = {January},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.15}
}

@INPROCEEDINGS{Prezerakos2007,
  author = {Prezerakos, G. N. and Tselikas, N. D. and Cortese, G.},
  title = {Model-driven Composition of Context-aware Web Services Using Context\textsc{UML}
	and Aspects},
  booktitle = {Proc. IEEE Int. Conf. Web Services ICWS 2007},
  year = {2007},
  pages = {320--329},
  abstract = {<span class='snippet'>Service</span> oriented architectures (SOAs)
	are constantly gaining ground for the provision <span class='snippet'>of</span>
	business to business as well as user-centric <span class='snippet'>services</span>,
	mainly in the form <span class='snippet'>of</span> <span class='snippet'>Web</span>
	<span class='snippet'>services</span> technology. SOAs enable <span
	class='snippet'>service</span> providers to design and deploy new,composite
	<span class='snippet'>service</span> offerings out <span class='snippet'>of</span>
	existing component <span class='snippet'>services</span>. In order
	to match end-user expectations with respect to personalization and
	ease <span class='snippet'>of</span> <span class='snippet'>use</span>,
	these <span class='snippet'>services</span> should be designed in
	a manner that allows them to exhibit a certain level <span class='snippet'>of</span>
	<span class='snippet'>context</span>-awareness which is a basic element
	towards a richer end-user experience. However, in the majority <span
	class='snippet'>of</span> such <span class='snippet'>services</span>,
	<span class='snippet'>context</span>-handling is still tightly coupled
	with the core functionality <span class='snippet'>of</span> the <span
	class='snippet'>service</span>, resulting in a design which is difficult
	to implement and maintain. The paper proposes the decoupling <span
	class='snippet'>of</span> core <span class='snippet'>service</span>
	logic from <span class='snippet'>context</span>-related functionality
	by adopting a <span class='snippet'>model</span>-<span class='snippet'>driven</span>
	approach based on a modified version <span class='snippet'>of</span>
	the Context\textsc{UML} metamodel. Core <span class='snippet'>service</span>
	logic and <span class='snippet'>context</span> handling are treated
	as separate concerns at the modeling level as well as in the resulting
	source code where aspect oriented programming (AOP) encapsulates
	<span class='snippet'>context</span>-dependent behavior in discrete
	code modules. The design <span class='snippet'>of</span> a restaurant
	finder <span class='snippet'>service</span> is <span class='snippet'>used</span>
	to portray the modified Context\textsc{UML} metamodel and the <span
	class='snippet'>service</span> modeling process which is covered
	in full. Respective code snippets belonging to the executable version
	<span class='snippet'>of</span> the <span class='snippet'>service</span>
	(part <span class='snippet'>of</span> work in progress) are also
	provided, illustrating the transition from <span class='snippet'>model</span>
	to code and the resulting separation <span class='snippet'>of</span>
	concerns.},
  comment = {class diagram, metamodel},
  doi = {10.1109/ICWS.2007.123},
  file = {:./process/interesse/class diagrams/4279615.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Rajan:2008:PLQ:1428508.1428520,
  author = {Rajan, Hridesh and Leavens, Gary T.},
  title = {Ptolemy: A Language with Quantified, Typed Events},
  booktitle = {Proceedings of the 22nd European conference on Object-Oriented Programming},
  year = {2008},
  series = {ECOOP '08},
  pages = {155--179},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  acmid = {1428520},
  doi = {http://dx.doi.org/10.1007/978-3-540-70592-5_8},
  isbn = {978-3-540-70591-8},
  location = {Paphos, Cypress},
  numpages = {25},
  owner = {Thiago Gottardi},
  timestamp = {2011.03.31},
  url = {http://dx.doi.org/10.1007/978-3-540-70592-5_8}
}

@INPROCEEDINGS{Rajan2005,
  author = {Rajan, Hridesh and Sullivan, Kevin J.},
  title = {Classpects: unifying aspect- and object-oriented language design},
  booktitle = {ICSE '05: Proceedings of the 27th international conference on Software
	engineering},
  year = {2005},
  pages = {59--68},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {The contribution of this work is the design, implementation, and early
	evaluation of a programming language that unifies classes and aspects.
	We call our new module construct the classpect. We make three basic
	claims. First, we can realize a unified design without significantly
	compromising the expressiveness of current aspect languages. Second,
	such a design improves the conceptual integrity of the programming
	model. Third, it significantly improves the compositionality of aspect
	modules, expanding the program design space from the two-layered
	model of AspectJ-like languages to include hierarchical structures.
	To support these claims, we present the design and implementation
	of Eos-U, an AspectJ-like language based on C# that supports classpects
	as the basic unit of modularity. We show that Eos-U supports layered
	designs in which classpects separate integration concerns flexibly
	at multiple levels of composition. The underpinnings of our design
	include support for aspect instantiation under program control, instance-level
	advising, advising as a general alternative to object-oriented method
	invocation and overriding, and the provision of a separate join-point-method
	binding construct.},
  comment = {formal},
  doi = {http://doi.acm.org/10.1145/1062455.1062483},
  file = {:./process/interesse/formal specifications/p59-rajan.pdf:PDF},
  isbn = {1-59593-963-2},
  keywords = {aspect-oriented, classpect, join point-method binding},
  location = {St. Louis, MO, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Rashid2006,
  author = {Rashid, Awais and Garcia, Alessandro and Moreira, Ana},
  title = {Aspect-oriented software development beyond programming},
  booktitle = {ICSE '06: Proceedings of the 28th international conference on Software
	engineering},
  year = {2006},
  pages = {1061--1062},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {This tutorial focuses on applying aspect-oriented software development
	(AOSD) concepts beyond the programming stage of the software development
	life cycle. Using concrete methods, tools, techniques and notations
	we discuss how to use AOSD techniques to systematically treat crosscutting
	concerns during requirements engineering (RE), architecture design
	and detailed design as well as the mapping between aspects at these
	stages. With a clear focus on composition, modelling, trade-off analysis
	and assessment methods, the tutorial imparts an engineering ethos
	for translation into day-to-day processes and practices.},
  comment = {use case},
  doi = {http://doi.acm.org/10.1145/1134285.1134506},
  file = {:./process/interesse/requirements usecase/p1061-rashid.pdf:PDF},
  isbn = {1-59593-375-1},
  location = {Shanghai, China},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Rashid2002,
  author = {Rashid, A. and Sawyer, P. and Moreira, A. and Araujo, J.},
  title = {Early aspects: a model for aspect-oriented requirements engineering},
  booktitle = {Proc. IEEE Joint Int Requirements Engineering Conf},
  year = {2002},
  pages = {199--202},
  abstract = {Effective RE must reconcile the need to achieve separation of concerns
	with the need to satisfy broadly scoped requirements and constraints.
	Techniques such as use cases and viewpoints help achieve separation
	of stakeholders' concerns but ensuring their consistency with global
	requirements and constraints is largely unsupported. We build on
	recent work that has emerged from the aspect-oriented programming
	(AOP) community to propose a general model for aspect oriented requirements
	engineering (AORE). The model supports separation of crosscutting
	functional and non-functional properties at the requirements level.
	We argue that early separation of such crosscutting properties supports
	effective determination of their mapping and influence on artefacts
	at later development stages. A realisation of the model based on
	a case study of a toll collection system is presented.},
  comment = {activity diagram},
  doi = {10.1109/ICRE.2002.1048526},
  file = {:./process/interesse/activity diagram/4291150.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{Reddy05modelcomposition,
  author = {Raghu Reddy and Robert France and Sudipto Ghosh and Franck Fleurey
	and Benoit Baudry},
  title = {Model Composition - A Signature-Based Approach},
  booktitle = {Aspect Oriented Modeling (AOM) Workshop, Montego},
  year = {2005},
  citeseerurl = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.93.7286},
  comment = {class diagram, model weaving},
  doi = {10.1.1.93.7286},
  file = {:./process/interesse/class diagrams/Reddy.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Restivo2008,
  author = {Restivo, Andr\'{e} and Aguiar, Ademar},
  title = {Disciplined composition of aspects using tests},
  booktitle = {LATE '08: Proceedings of the 2008 AOSD workshop on Linking aspect
	technology and evolution},
  year = {2008},
  pages = {1--5},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {A large part of the software development effort is typically spent
	on maintenance and evolution, namely on adding new and unanticipated
	features. As aspect-oriented programming (AOP) can be easily used
	to compose software in non-planned ways, many researchers are investigating
	AOP as a technique that can play an important role in this particular
	field. However, unexpected interactions between aspects are still
	a major problem that compromise AOP's applicability, especially in
	large projects where many developers, often including new team members,
	are involved in the process. This paper addresses the issues of aspect
	conflicts and interactions and proposes a technique to help compose
	aspects in a disciplined way using a test-driven development approach.
	A simple example for a banking system helps on illustrating the technique.},
  comment = {formal},
  doi = {http://doi.acm.org/10.1145/1404953.1404961},
  file = {:./process/interesse/formal specifications/a8-restivo.pdf:PDF},
  isbn = {978-1-60558-147-7},
  location = {Brussels, Belgium},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Roubtsova2010,
  author = {Roubtsova, Ella and Joosten, Stef and Wedemeijer, Lex},
  title = {Behavioural model for a business rules based approach to model services},
  booktitle = {BM-FA '10: Proceedings of the Second International Workshop on Behaviour
	Modelling},
  year = {2010},
  pages = {1--8},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Service-oriented systems are seen as an IT trend impacting businesses.
	Successful implementation and maintenance of such systems demands
	their modelling. However most modern modelling approaches do not
	have the necessary service abstractions and suitable composition
	techniques for integration of behaviour of services. The contribution
	of this paper is the analysis of the behavioural semantics of a declarative,
	business rules based approach called Ampersand and the identification
	of the semantic extensions needed for modelling of services and their
	composition.},
  doi = {http://doi.acm.org/10.1145/1811147.1811153},
  isbn = {978-1-60558-961-9},
  location = {Paris, France},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Roubtsova2009,
  author = {Roubtsova, Ella E. and McNeile, Ashley T.},
  title = {Abstractions, composition and reasoning},
  booktitle = {AOM '09: Proceedings of the 13th workshop on Aspect-oriented modeling},
  year = {2009},
  pages = {19--24},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {We propose that different process algebraic composition techniques,
	combined with consideration of the restrictions on the ability of
	different parts of a system to share data and state, can provide
	a basis for identifying abstractions at the Platform Independent
	level of modelling. The paper presents our ideas and is aimed to
	initiate a discussion about the basis for identification of abstractions
	and the related areas of composition, reasoning and interface specifications,
	at the platform independent level.},
  comment = {model weaving, use case},
  doi = {http://doi.acm.org/10.1145/1509297.1509303},
  file = {:./process/interesse/model weaving/aom4s-roubtsova.pdf:PDF},
  isbn = {978-1-60558-451-5},
  location = {Charlottesville, Virginia, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{1404925,
  author = {S\'{a}nchez, Mario and Villalobos, Jorge},
  title = {A flexible architecture to build workflows using aspect-oriented
	concepts},
  booktitle = {AOM '08: Proceedings of the 2008 AOSD workshop on Aspect-oriented
	modeling},
  year = {2008},
  pages = {25--30},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Since many workflow applications are used in contexts where the requirements
	and business rules change frequently, it is necessary to build those
	applications using strategies and tools that favor adaptation and
	reuse. The goal of this paper is to show an approach to build these
	extensible workflow applications using synchronized executable models.
	This approach uses concepts related to aspect-oriented software development,
	such as concern separation and instrumentation; thus, in addition
	to presenting the approach, we discuss our view on the central characteristics
	that define aspect-modeling, and we show how these concepts relate
	to our work and how they can be applied to workflow applications.},
  comment = {activity diagram, model weaving},
  doi = {http://doi.acm.org/10.1145/1404920.1404925},
  file = {:./process/interesse/activity diagram/SanchezM_final.pdf:PDF},
  isbn = {978-1-60558-145-3},
  location = {Brussels, Belgium},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{S'anchez2008a,
  author = {S\'{a}nchez, Pablo and Fuentes, Lidia and Stein, Dominik and Hanenberg,
	Stefan and Unland, Rainer},
  title = {Aspect-Oriented Model Weaving Beyond Model Composition and Model
	Transformation},
  booktitle = {MoDELS '08: Proceedings of the 11th international conference on Model
	Driven Engineering Languages and Systems},
  year = {2008},
  pages = {766--781},
  address = {Berlin, Heidelberg},
  publisher = {Springer-Verlag},
  abstract = {Research in Aspect-Oriented Software Development (AOSD) has brought
	up powerful abstractions in order to specify under which conditions
	an aspect affects the base software. So far, Model-Driven Development
	(MDD) approaches to AOSD have mostly concentrated on the weaving
	process and, as a result, they have come up with manifold ways to
	compose aspect models and base models. All too often, however, the
	approaches disregard the benefits that the aspect-oriented abstractions
	can bring to software development, though. This paper discusses the
	implications that such negligence has on the specification of aspect-oriented
	models in MDD. Furthermore, it presents a weaver that is able to
	cope with sophisticated join point selection abstractions, as they
	are known from many aspect-oriented programming languages, and which
	go far beyond the selection capabilities provided by current model
	weavers. By means of this weaver, models can realize both a higher
	separation of concerns as well as a higher level of abstraction.},
  comment = {model weaving},
  doi = {http://dx.doi.org/10.1007/978-3-540-87875-9_53},
  file = {:./process/interesse/model weaving/sanchez2.pdf:PDF},
  isbn = {978-3-540-87874-2},
  location = {Toulouse, France},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@ARTICLE{S'anchez2010,
  author = {S\'{a}nchez, Pablo and Moreira, Ana and Fuentes, Lidia and Ara\'{u}jo,
	Jo\, {a}o and Magno, Jos\'{e}},
  title = {Model-driven development for early aspects},
  journal = {Inf. Softw. Technol.},
  year = {2010},
  volume = {52},
  pages = {249--273},
  number = {3},
  __markedentry = {[Lab Valter 2]},
  abstract = {Currently, non-functional requirements (NFRs) consume a considerable
	part of the software development effort. The good news is that most
	of them appear time and again during system development and, luckily,
	their solutions can be often described as a pattern independently
	from any specific application or domain. A proof of this are the
	current application servers and middleware platforms that can provide
	configurable prebuilt services for managing some of these crosscutting
	concerns, or aspects. Nevertheless, these reusable pattern solutions
	presents two shortcomings, among others: (1) they need to be applied
	manually; and (2) most of these pattern solutions do not use aspect-orientation,
	and, since NFRs are often crosscutting concerns, this leads to scattered
	and tangled representations of these concerns. Our approach aims
	to overcome these limitations by: (1) using model-driven techniques
	to reduce the development effort associated to systematically apply
	reusable solutions for satisfying NFRs; and (2) using aspect-orientation
	to improve the modularization of these crosscutting concerns. Regarding
	the first contribution, since the portion of a system related to
	NFRs is usually significant, the reduction on the development effort
	associated to these NFRs is also significant. Regarding the second
	contribution, the use aspect-orientation improves maintenance and
	evolution of the non-functional requirements that are managed as
	aspects. An additional contribution of our work is to define a mapping
	and transition from aspectual requirements to aspect-oriented software
	architectures, which, in turn, contributes to improve the general
	issue of systematically relating requirements to architecture. Our
	approach is illustrated by applying it to a Toll Gate case study.},
  address = {Newton, MA, USA},
  doi = {http://dx.doi.org/10.1016/j.infsof.2009.09.001},
  issn = {0950-5849},
  owner = {Lab Valter 2},
  publisher = {Butterworth-Heinemann},
  timestamp = {2010.08.27}
}

@INPROCEEDINGS{S'anchez2008,
  author = {S\'{a}nchez, Pablo and Stein, Dominik and Hanenberg, Stefan},
  title = {State charts as an intermediate representation of JPDDs which help
	developers to map them to executable artifacts},
  booktitle = {AOM '08: Proceedings of the 2008 AOSD workshop on Aspect-oriented
	modeling},
  year = {2008},
  pages = {31--36},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Join Point Designation Diagrams (JPDDs) give developers the ability
	to model their join point selections in the \textsc{UML}, independent
	of any existing aspect-oriented programming language. In order to
	apply JPDDs in real software projects, it is necessary to have an
	executable representation of them -- either in terms of generated
	code for the desired aspect-oriented programming language or directly
	as executable diagrams in an environment that permits to execute
	\textsc{UML} diagrams. While principles for translating JPDDs into
	a target language are already known, it turns out that developers
	who follow those principles still face a large number of problems
	due to the complex selection semantics for dynamic join point: developers
	need to collect all data that is necessary to detect dynamic join
	points, and they need to maintain that data in appropriate data structures.
	In order to ease this step, it is desirable to translate JPDDs into
	an intermediate representation that equips the developers with a
	more concrete understanding about what information is needed, and
	when it needs to be stored or updated. This paper mainly addresses
	the motivation for such an intermediate representation and gives
	a first step into that direction -- the translation of JPDDs based
	on sequence diagrams into executable state charts.},
  comment = {interaction diagram, model weaving},
  doi = {http://doi.acm.org/10.1145/1404920.1404926},
  file = {:./process/interesse/interaction diagrams/SanchezP_final.pdf:PDF},
  isbn = {978-1-60558-145-3},
  location = {Brussels, Belgium},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Saeki2000,
  author = {Saeki, M.},
  title = {Patterns and aspects for use cases: reuse techniques for use case
	descriptions},
  booktitle = {Proc. 4th Int Requirements Engineering Conf},
  year = {2000},
  abstract = {We discuss two types of reusable components for use case descriptions;
	use case patterns (templates) and aspect patterns. We investigate
	which parts of use case descriptions can be catalogued as reusable
	patterns and templates for requirements analysis processes: 1) use
	case templates for describing use cases; 2) use case patterns for
	providing the reusable and changeable structures of use cases; 3)
	use case frameworks that are the large-scale combinations of use
	case patterns for application domains; and 4) aspect patterns for
	weaving non-functional requirements with functional requirements.
	We describe functional requirements separating from nonfunctional
	requirements and after specifying them both, we weave them together
	into a final requirements specification written with use cases},
  comment = {use case},
  doi = {10.1109/ICRE.2000.855586},
  file = {:./process/interesse/requirements usecase/855586.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{sakenou,
  author = {Sakenou, D. and Mehner, K. and Herrmann, S. and Sudhof, H.},
  title = {Patterns for Re-usable Aspects in Object Teams},
  booktitle = {Net Object Days},
  year = {2006},
  address = {Erfurt},
  owner = {thiago},
  timestamp = {2012.04.17}
}

@ARTICLE{Schmidt06_ModelDrivenEngineering,
  author = {Douglas C. Schmidt},
  title = {Model-Driven Engineering},
  journal = {IEEE Computer},
  year = {2006},
  volume = {39},
  number = {2},
  month = {February},
  abstract = {Model-driven engineering technologies offer a promising approach to
	address the inability of third-generation languages to alleviate
	the complexity of platforms and express domain concepts effectively.},
  owner = {thiago},
  timestamp = {2011.03.15},
  url = {http://www.truststc.org/pubs/30.html}
}

@BOOK{sebesta,
  title = {Concepts of programming languages},
  publisher = {Addison-Wesley},
  year = {2002},
  author = {Robert W. Sebesta},
  address = {(Boston) United States of America},
  edition = {5},
  owner = {Thiago Gottardi},
  timestamp = {2010.11.17}
}

@INPROCEEDINGS{shah,
  author = {Shah, V and Hill, V},
  title = {An Aspect-Oriented Security Framework: Lessons Learned},
  booktitle = {Proceedings of AOSDSEC'04 (AOSD Technology for Application-Level
	Security). 
	
	Workshop of the Aspect Oriented Software Development Conference},
  year = {2004},
  address = {Lancaster, UK},
  month = {March, 23},
  owner = {Thiago Gottardi},
  timestamp = {2011.02.19}
}

@INPROCEEDINGS{Sharif2005,
  author = {Sharif, H. and Rehan, S. and Farrukh, G. A.},
  title = {Aspect-Oriented Requirements Engineering: A Use Case Based Approach},
  booktitle = {Proc. 9th Int. Multitopic Conf. IEEE INMIC 2005},
  year = {2005},
  pages = {1--5},
  abstract = {Aspect oriented software development has shown a new level of modularization
	at design and implementation level. A technique is presented in this
	paper for aspect oriented modeling of requirements. An extension
	is proposed for \textsc{UML} use case relationships that enable the
	requirements model to capture the crosscutting nature of different
	software concerns. Using aspect oriented modeling of requirements
	can lead to better system design. System's understandability and
	traceability is improved that leads to better design and easier maintenance},
  comment = {use case},
  doi = {10.1109/INMIC.2005.334421},
  file = {:./process/interesse/requirements usecase/4133436.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Shen2008,
  author = {Wuwei Shen and Wong, W. E.},
  title = {Flexible Aspect-Oriented Design Model Checking},
  booktitle = {Proc. 15th Asia-Pacific Software Engineering Conf. APSEC '08},
  year = {2008},
  pages = {537--544},
  abstract = {An aspect-oriented design model is composed of a primary design model
	and an aspect model, each of which has a different origin and pursues
	different goals. How to ensure the correctness of the composition
	of a primary design model and an aspect model has become an important
	issue. In this paper, we validate an aspect-oriented design model
	using the \textsc{UML} profile extension mechanism. With this mechanism,
	engineers can utilize the ICER tool to find errors in an aspect-oriented
	design model using the instance-of relationship. Moreover, the profile
	extension mechanism also provides engineers with an ability to introduce
	their own validation of an aspect-oriented design model. This flexibility
	allows engineers to express the special requirements in a particular
	development environment. We also illustrate how ICER can find errors
	in a real aspect-oriented design model composed by the \textsc{UML}
	metamodel and a creation aspect model.},
  comment = {metamodel, model weaving},
  doi = {10.1109/APSEC.2008.14},
  file = {:./process/interesse/metamodel profiles/4724588.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Simmonds2005,
  author = {Simmonds, D. and Solberg, A. and Reddy, R. and France, R. and Ghosh,
	S.},
  title = {An aspect oriented model driven framework},
  booktitle = {Proc. Ninth IEEE Int. EDOC Enterprise Computing Conf},
  year = {2005},
  pages = {119--130},
  abstract = {In model driven development (MDD), specifying transformations between
	models at various levels of abstraction can be a complex task. Specifying
	transformations for pervasive system features that are tangled with
	other system features is particularly difficult because the elements
	to be transformed are distributed across a model. This paper presents
	an aspect oriented model driven framework (AOMDF) that facilitates
	separation of pervasive features and supports their transformation
	across different levels of abstraction. The framework is illustrated
	using an example in which a platform independent model of a banking
	application is transformed to a platform specific model.},
  comment = {activity diagram},
  doi = {10.1109/EDOC.2005.5},
  file = {:./process/interesse/activity diagram/1510008.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@ARTICLE{soares,
  author = {Soares, S. and Laureano, E. and Borba, P},
  title = {Distribution and Persistence as Aspects},
  journal = {Software: Practice and Experience},
  year = {2006},
  volume = {33},
  pages = {711-759},
  number = {7},
  owner = {Thiago Gottardi},
  timestamp = {2011.02.19}
}

@INPROCEEDINGS{Solberg2005,
  author = {Solberg, A. and Simmonds, D. and Reddy, R. and Ghosh, S. and France,
	R.},
  title = {Using aspect oriented techniques to support separation of concerns
	in model driven development},
  booktitle = {Proc. 29th Annual Int. Computer Software and Applications Conf. COMPSAC
	2005},
  year = {2005},
  volume = {1},
  pages = {121--126},
  abstract = {Model driven development (MDD) tackles software complexity through
	the use of models. However, managing relationships and specifying
	transformations between models at various levels of abstraction are
	complex tasks. System models tangled with concerns such as security
	and middleware make it difficult to develop complex systems and specify
	model transformations. This paper presents an MDD framework that
	uses aspect oriented techniques to facilitate separation of concerns.
	We argue that using the framework will simplify both the model development
	task and the task of specifying transformations. The conceptual model
	of the framework is presented and illustrated using distributed transactions
	at the PIM and PSM levels.},
  comment = {activity diagram},
  doi = {10.1109/COMPSAC.2005.168},
  file = {:./process/interesse/activity diagram/1510008.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{Som'e2008,
  author = {Som\'{e}, St\'{e}phane S. and Anthonysamy, Pauline},
  title = {An approach for aspect-oriented use case modeling},
  booktitle = {EA '08: Proceedings of the 13th international workshop on Early Aspects},
  year = {2008},
  pages = {27--34},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {A use case model is a specification of a system's requirements consisting
	in use cases, actors and relationships. A use case captures stakeholders
	concerns as required interactions between a system and its actors.
	Use case models may however include concerns that crosscut across
	several use cases. We propose an aspect&#62;&#62; relation for the
	modularization and composition of these crosscutting concerns. The
	composition approach is formally established by mappings to Petri
	nets, and is implemented as an extension to an existing use case
	modeling tool.},
  comment = {model weaving, use case},
  doi = {http://doi.acm.org/10.1145/1370828.1370835},
  file = {:./process/interesse/model weaving/p27-some.pdf:PDF},
  isbn = {978-1-60558-032-6},
  location = {Leipzig, Germany},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Song2009,
  author = {Song, Eunjee and Kim, Hanil and Sun, Wuliang},
  title = {A property-based verification approach in aspect-oriented modeling},
  booktitle = {SAC '09: Proceedings of the 2009 ACM symposium on Applied Computing},
  year = {2009},
  pages = {545--546},
  address = {New York, NY, USA},
  publisher = {ACM},
  __markedentry = {[LaPESiano]},
  abstract = {Aspect-oriented modeling (AOM) techniques have been advocated as solutions
	to support separation of crosscutting features from other application
	design concerns. In an AOM approach, crosscutting features are described
	by aspect models and other application features are described by
	a primary model [1]. However, composing an aspect model with a primary
	model can result in conflicts or compromised behaviors. Therefore,
	a key issue in applying the AOM approach is determining whether composition
	of an aspect model and a primary model produces a composed model
	that has desired properties. We extend the previous aspect composition
	approaches by France et al. [1] and Song et al. [2] by supporting
	a way to generate proof obligations that must be discharged in order
	to establish that a desired property holds in the composed class
	model. Fig. 1 shows an overview of our verifiable composition approach.
	The composition of a primary model class diagram and an aspect model
	class diagram (refer to the action (1) in Fig. 1) is accomplished
	according to a named-based composition proposed by [1]. Specifying
	the given property statement using the Object Constraint Language
	(OCL) provides the property to be verified denoted as Pprop (refer
	to (2)). The operation behavior in a composed model needs to be verified
	against this property. A proof obligation is generated and evaluated
	when a sequence diagram is derived from the operation specification
	in the composed class diagram (refer to (3)). If any faulty composition
	is notified during the evaluation, the current sequence diagram,
	which is partially derived at that point, and the current proof obligation
	may be used to determine at which part of the composition the property
	fails to hold. The information that is available when the composition
	stops, can be used by a developer to determine what needs to be done
	to correct the situation. Otherwise, a sequence diagram is obtained.
	For details of the action (3) in Fig. 1, refer to our earlier work
	in [3].},
  comment = {class diagram, interaction diagram, model weaving},
  doi = {http://doi.acm.org/10.1145/1529282.1529398},
  file = {:./process/interesse/class diagrams/p545-song.pdf:PDF},
  isbn = {978-1-60558-166-8},
  location = {Honolulu, Hawaii},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Song2008,
  author = {Eunjee Song and Roberts, N. V.},
  title = {Verifiable Aspect Composition in \textsc{UML} Models},
  booktitle = {Proc. Second Int. Conf. Secure System Integration and Reliability
	Improvement SSIRI '08},
  year = {2008},
  pages = {201--202},
  abstract = {Aspect-oriented modeling (AOM) can achieve better separation of concerns
	than standard object-oriented modeling, at the cost of some additional
	complexity in the aspect composition specification. This complexity
	may obscure or, if the composition specification is incorrect, produce
	design errors. To facilitate correction of these errors, we describe
	a process by which desired features may be verified in such a way
	that, if the verification fails, it is relatively straightforward
	to identify suspect elements of the composition specification.},
  comment = {formal, metamodel},
  doi = {10.1109/SSIRI.2008.61},
  file = {:./process/interesse/formal specifications/4579824.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{soudarajan,
  author = {Soudarajan, N. and Khatchadourian, R.},
  title = {Specifying Reusable Aspects},
  booktitle = {Asian Workshop on Aspect-Oriented and Modular Software Development
	(AOAsia'09)},
  year = {2009},
  owner = {thiago},
  timestamp = {2012.04.17}
}

@INPROCEEDINGS{aspectcpp,
  author = {Spinczyk, O. and Gal , A. and Schröder-Preikschat, W.},
  title = {Aspect\textsc{C}++: an aspect-oriented extension to the \textsc{C}++
	programming language},
  booktitle = {Proceedings of the Fortieth International Conference on Tools P.
	Sydney, Australia},
  year = {2002},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.22}
}

@INPROCEEDINGS{STEIN,
  author = {Stein, D. and Hanenberg, Stefan and Unland, Rainer},
  title = {An \textsc{UML}-based Aspect-Oriented Design Notation For AspectJ},
  booktitle = {AOSD 2002},
  year = {2002},
  address = {University of Essen, Germany.},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.16}
}

@INPROCEEDINGS{Straw04modelcomposition,
  author = {Greg Straw and Geri Georg and Eunjee Song and Sudipto Ghosh and Robert
	France and James M. Bieman},
  title = {Model Composition Directives},
  booktitle = {Proceedings of the 7th International Conference Unified Modelling
	Language: Modelling Languages and Applications},
  year = {2004},
  pages = {84--97},
  publisher = {Springer},
  abstract = {An aspect-oriented design model consists of a set of aspect models
	and a primary model. Each of these models consists of a number of
	different kinds of \textsc{UML} diagrams. The models must be composed
	to identify conflicts and analyze the system as a whole. We have
	developed a systematic approach for composing class diagrams in which
	a default composition procedure based on name matching can be customized
	by user-defined composition directives. This paper describes a set
	of composition directives that constrain how class diagrams are composed.},
  citeseerurl = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.72.5854},
  comment = {class diagram, model weaving},
  doi = {10.1.1.72.5854},
  file = {:./process/interesse/model weaving/fulltext.pdf:PDF;:./process/interesse/class diagrams/Model Compostion Directives.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Surajbali2007,
  author = {Surajbali, Bholanathsingh and Coulson, Geoff and Greenwood, Phil
	and Grace, Paul},
  title = {Augmenting reflective middleware with an aspect orientation support
	layer},
  booktitle = {ARM '07: Proceedings of the 6th international workshop on Adaptive
	and reflective middleware},
  year = {2007},
  pages = {1--6},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Reflective middleware provides an effective way to support adaptation
	in distributed systems. However, as distributed systems become increasingly
	complex, certain drawbacks of the reflective middleware approach
	are becoming evident. In particular, reflective APIs are found to
	impose a steep learning curve, and to place too much expressive power
	in the hands of developers. Recently, researchers in the field of
	Aspect-Oriented Programming (AOP) have argued that 'dynamic aspects'
	show promise in alleviating these drawbacks. In this paper, we report
	on work that attempts to combine the reflective middleware and AOP
	approaches. We build an AOP support layer on top of an underlying
	reflective middleware substrate in such a way that it can be dynamically
	deployed/undeployed where and when required, and imposes no overhead
	when it is not used. Our AOP approach involves aspects that can be
	dynamically (un)weaved across a distributed system on the basis of
	pointcut expressions that are inherently distributed in nature, and
	it supports the composition of advice that is remote from the advised
	joinpoint. An overall goal of the work is to effectively combine
	reflective middleware and AOP in a way that maximises the benefits
	and minimises the drawbacks of each.},
  comment = {metrics},
  doi = {http://doi.acm.org/10.1145/1376780.1376781},
  file = {:./process/interesse/metrics-complexity/a1-surajbali.pdf:PDF},
  isbn = {978-1-59593-931-9},
  location = {Newport Beach, CA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{suzuki,
  author = {Suzuki, J. and Yamamoto, Y},
  title = {Extending \textsc{UML} with aspects},
  booktitle = {Proceedings of the third ECOOP Aspect-Oriented Programming Workshop},
  year = {1999},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.21}
}

@INPROCEEDINGS{hyper,
  author = {Tarr, P. and Ossher, H. and Sutton, S.},
  title = {Hyper/\textsc{J} (TM) : Multi-dimensional Separation of Concerns
	for \textsc{J}ava},
  booktitle = {Proc. of the 24th International Conference on Software Engineering.
	Orlando, Florida},
  year = {2002},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.27}
}

@MISC{aspectj,
  author = {\nothing{AspectJ}~Team},
  title = {The \textsc{A}spect\textsc{J}(TM) Programming Guide},
  year = {2003},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.22}
}

@INPROCEEDINGS{Thuan2007,
  author = {Truong Ninh Thuan and Nguyen Viet Ha},
  title = {Using B to Verify the Weaving of Aspects},
  booktitle = {Proc. 14th Asia-Pacific Software Engineering Conf. APSEC 2007},
  year = {2007},
  pages = {199--205},
  abstract = {Aspect J is an aspect-oriented extension of the Java language that
	enables a modular implementation of crosscutting concerns. Despite
	this, aspects lack support for formal specification and verification.
	This paper expresses the base class and some related aspects of Aspect
	J model in B notation. It aims to benefit from proof obligations
	generated by B tools to ensure the correctness of Aspect J component
	composition. Static crosscuts of aspects are guaranteed by proof
	obligations of relation clauses between B abstract machines and dynamic
	crosscuts are proved by proof obligations of B refinement machines.
	This approach is illustrated by verifying a simple example.},
  comment = {secure composition, test debug, weaving conflicts},
  doi = {10.1109/ASPEC.2007.61},
  file = {:./process/interesse/secure composition/4425855.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Tkatchenko,
  author = {Maria Tkatchenko and Gregor Kiczales},
  title = {Uniform Support for Modeling Crosscutting Structure},
  booktitle = {At the Aspect Oriented Modeling Workshop, held in conjunction with
	AOSD'05, Chicago, USA},
  year = {2005},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.22}
}

@INPROCEEDINGS{Tonella2004,
  author = {Tonella, P. and Ceccato, M.},
  title = {Aspect mining through the formal concept analysis of execution traces},
  booktitle = {Proc. 11th Working Conf. Reverse Engineering},
  year = {2004},
  pages = {112--121},
  abstract = {The presence of crosscutting concerns, i.e., functionalities that
	are not assigned to a single modular unit in the implementation,
	is one of the major problems in software understanding and evolution.
	In fact, they are hard to locate (scattering) and may give rise to
	multiple ripple effects (tangling). Aspect oriented programming offers
	mechanisms to factor them out into a modular unit, called an aspect.
	Aspect identification in existing code is supported by means of dynamic
	code analysis. Execution traces are generated for the use cases that
	exercise the main functionalities of the given application. The relationship
	between execution traces and executed computational units (class
	methods) is subjected to concept analysis. In the resulting lattice,
	potential aspects are detected by determining the use-case specific
	concepts and examining their specific computational units. When these
	come from multiple modules (classes) which contribute to multiple
	use-cases, a candidate aspect is recognized.},
  comment = {reverse refactpr, formal},
  doi = {10.1109/WCRE.2004.13},
  file = {:./process/interesse/reverse refactor/1374311.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{VanLanduyt2009,
  author = {Van Landuyt, Dimitri and Op de beeck, Steven and Truyen, Eddy and
	Joosen, Wouter},
  title = {Domain-driven discovery of stable abstractions for pointcut interfaces},
  booktitle = {AOSD '09: Proceedings of the 8th ACM international conference on
	Aspect-oriented software development},
  year = {2009},
  pages = {75--86},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {The benefits of defining explicit pointcut interfaces in aspect-oriented
	applications have been advocated by many. A pointcut interface exposes
	a set of crosscutting abstract behaviours (as named pointcut signatures)
	that multiple aspects in the application can use. In accordance with
	the dependency inversion and stable dependencies principles, a pointcut
	interface should expose only stable abstractions in order to maximally
	promote its reuse across a family of applications.
	
	
	In this paper, we propose a domain-driven architecture method for
	designing such stable pointcut interfaces. The method employs systematic
	reengineering of use case models to discover stable abstractions
	that are anchored in the domain model of the application. During
	architecture design, these stable domain abstractions are mapped
	to pointcut interfaces. As part of this mapping activity, the architecture
	is constrained to ensure that the pointcut interfaces can be implemented
	correctly.
	
	
	We have applied this method in two applications, where we validate
	that pointcut interfaces can be reused for implementing the composition
	logic of different aspects without requiring modification to their
	pointcut signatures. Moreover, the method consistently yields pointcut
	interface hierarchies.},
  comment = {activity diagram, class diagram, use case},
  doi = {http://doi.acm.org/10.1145/1509239.1509251},
  file = {:./process/interesse/activity diagram/p75-vanlanduyt.pdf:PDF},
  isbn = {978-1-60558-442-3},
  location = {Charlottesville, Virginia, USA},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.05}
}

@INPROCEEDINGS{Vanhaute01buildingframeworks,
  author = {Bart Vanhaute and Bart de Decker and Bart de Win and De Decker},
  title = {Building Frameworks in \textsc{A}spect\textsc{J}},
  booktitle = {Workshop on Advanced Separation of Concerns (ECOOP 2001},
  year = {2001},
  pages = {1--6},
  owner = {thiago},
  timestamp = {2011.03.16}
}

@INPROCEEDINGS{Voelter2007,
  author = {Voelter, M. and Groher, I.},
  title = {Product Line Implementation using Aspect-Oriented and Model-Driven
	Software Development},
  booktitle = {Proc. 11th Int. Software Product Line Conf. SPLC 2007},
  year = {2007},
  pages = {233--242},
  note = {enviar pro andré},
  abstract = {<span class='snippet'>Software</span> <span class='snippet'>product</span>
	<span class='snippet'>line</span> engineering aims to reduce <span
	class='snippet'>development</span> time, effort, cost, <span class='snippet'>and</span>
	complexity by taking advantage of the commonality within a portfolio
	of similar <span class='snippet'>products</span>. The effectiveness
	of a <span class='snippet'>software</span> <span class='snippet'>product</span>
	<span class='snippet'>line</span> approach directly depends on how
	well feature variability within the portfolio is implemented <span
	class='snippet'>and</span> managed throughout the <span class='snippet'>development</span>
	lifecycle, from early analysis through maintenance <span class='snippet'>and</span>
	evolution. This paper presents an approach that facilitates variability
	<span class='snippet'>implementation</span>, management <span class='snippet'>and</span>
	tracing by integrating <span class='snippet'>model</span>-<span class='snippet'>driven</span>
	<span class='snippet'>and</span> <span class='snippet'>aspect</span>-<span
	class='snippet'>oriented</span> <span class='snippet'>software</span>
	<span class='snippet'>development</span>. Features are separated
	in models <span class='snippet'>and</span> composed by <span class='snippet'>aspect</span>-<span
	class='snippet'>oriented</span> composition techniques on <span class='snippet'>model</span>
	level. <span class='snippet'>Model</span> transformations support
	the transition from problem to solution domain. <span class='snippet'>Aspect</span>-<span
	class='snippet'>oriented</span> techniques enable the explicit expression
	<span class='snippet'>and</span> modularization of variability on
	<span class='snippet'>model</span>, code, <span class='snippet'>and</span>
	template level The presented concepts are illustrated with a case
	study of a home automation system.},
  comment = {class diagram, product line},
  doi = {10.1109/SPLINE.2007.23},
  file = {:./process/interesse/class diagrams/4339272.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Wada2006,
  author = {Wada, H. and Suzuki, J.},
  title = {A Domain Specific Modeling Framework for Secure Network Applications},
  booktitle = {Proc. 30th Annual Int. Computer Software and Applications Conf. COMPSAC
	'06},
  year = {2006},
  volume = {2},
  pages = {353--355},
  abstract = {<span class='snippet'>Domain</span> <span class='snippet'>specific</span>
	languages (DSLs) provide <span class='snippet'>a</span> promising
	solution to directly represent and implement <span class='snippet'>domain</span>
	concepts (G. Cook, 2004). DSLs are visual or textual languages targeted
	to particular problem <span class='snippet'>domains</span>, rather
	than general-purpose languages that are aimed at any software problems.
	Various DSLs have been proposed and used <span class='snippet'>for</span>
	describing, <span class='snippet'>for</span> example, security aspects
	of <span class='snippet'>network</span> <span class='snippet'>applications</span>
	(e.g., role-based access control, data encryption and <span class='snippet'>secure</span>
	<span class='snippet'>network</span> links) (T. Lodderstedt et al.,
	2002). Although many experience reports have demonstrated DSLs can
	improve software development productivity (e.g., by M. Vokac, 2005),
	existing DSLs are supported only by <span class='snippet'>specific</span>
	tools and <span class='snippet'>frameworks</span>; there are few
	generic <span class='snippet'>frameworks</span> supporting arbitrary
	DSLs. This Ph.D. research investigates <span class='snippet'>a</span>
	generic <span class='snippet'>model</span>-driven development (MDD)
	<span class='snippet'>framework</span> that supports arbitrary DSLs,
	and empirically evaluates <span class='snippet'>a</span> series of
	techniques to develop such <span class='snippet'>a</span> <span class='snippet'>framework</span>.
	Steps towards creating the proposed <span class='snippet'>framework</span>
	include investigating <span class='snippet'>a</span> generic foundation
	to handle arbitrary DSLs; strategies, principles and tradeoffs in
	different DSL designs (e.g., DSL syntax and semantics); building
	blocks <span class='snippet'>for</span> <span class='snippet'>modeling</span>
	and programming <span class='snippet'>domain</span> concepts; transformation
	strategies from <span class='snippet'>domain</span> concepts to the
	final (compilable) source code; and development processes to leverage
	the proposed <span class='snippet'>framework</span> well},
  doi = {10.1109/COMPSAC.2006.93},
  file = {:./process/interesse/model weaving/4020194.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Wehrmeister2008,
  author = {Wehrmeister, M. A. and Freitas, E. P. and Pereira, C. E. and Rammig,
	F.},
  title = {GenERTiCA: A Tool for Code Generation and Aspects Weaving},
  booktitle = {Proc. 11th IEEE Int Object Oriented Real-Time Distributed Computing
	(ISORC) Symp},
  year = {2008},
  pages = {234--238},
  abstract = {Model-driven design (MDD) can be perceived in the recent literature
	as an option to deal with the increasing complexity of the design
	of distributed embedded real-time systems (DERTS). This paper reports
	some results of a research project aiming to support a MDD approach,
	which applies concepts of the aspect-oriented (AO) paradigm in order
	to improve the treatment of non-functional requirements (NFR) in
	the design of DERTS. A tool named GenERTiCA, which generates source
	code from \textsc{UML} diagrams and also weaves aspect adaptations,
	has been developed to support such MDD/AO approach. This paper presents
	results regarding the use of GenERTiCA to generate code and implement
	aspects (from a high-level framework of aspect) for the RT-FemtoJava
	platform, a RTSJ-based and optimized Java platform for DERTS.},
  comment = {model weaving},
  doi = {10.1109/ISORC.2008.67},
  file = {:./process/interesse/model weaving/4519583.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Whittle2006,
  author = {Whittle, Jon and Ara\'{u}jo, Jo\, {a}o and Moreira, Ana},
  title = {Composing aspect models with graph transformations},
  booktitle = {EA '06: Proceedings of the 2006 international workshop on Early aspects
	at ICSE},
  year = {2006},
  pages = {59--65},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {This paper presents a new method for composing aspect models. The
	method is based on the use of a \textsc{UML}-based aspect modeling
	language to precisely and graphically specify model--level aspects
	and the use of graph transformations to define how aspects should
	be composed and to apply those compositions. The result is a method
	for representing and composing aspect-oriented models that is both
	scalable and expressive. The work is validated on an air traffic
	control example based on a NASA application.},
  comment = {interaction diagram, model weaving, use case},
  doi = {http://doi.acm.org/10.1145/1137639.1137649},
  file = {:./process/interesse/interaction diagrams/p58-whittle.pdf:PDF},
  isbn = {1-59593-405-7},
  location = {Shanghai, China},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@ARTICLE{mata,
  author = { Jon Whittle and A. Moreira and J. Araújo },
  title = { \textsc{MATA}: A Unified Approach for Composing \textsc{UML} Aspect
	Models Based on Graph Transformation },
  journal = { Transactions on Aspect Oriented Software Development (TAOSD) },
  year = { 2009 },
  volume = { 5560 }
}

@INPROCEEDINGS{Whittle2008,
  author = {Whittle, Jon and Wijesekera, Duminda and Hartong, Mark},
  title = {Executable misuse cases for modeling security concerns},
  booktitle = {ICSE '08: Proceedings of the 30th international conference on Software
	engineering},
  year = {2008},
  pages = {121--130},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {Misuse cases are a way of modeling negative requirements, that is,
	behaviors that should not occur in a system. In particular, they
	can be used to model attacks on a system as well as the security
	mechanisms needed to avoid them. However, like use cases, misuse
	cases describe requirements in a high-level and informal manner.
	This means that, whilst they are easy to understand, they do not
	lend themselves to testing or analysis. In this paper, we present
	an executable misuse case modeling language which allows modelers
	to specify misuse case scenarios in a formal yet intuitive way and
	to execute the misuse case model in tandem with a corresponding use
	case model. Misuse scenarios are given in executable form and mitigations
	are captured using aspect-oriented modeling. The technique is useful
	for brainstorming potential attacks and their mitigations. Furthermore,
	the use of aspects allows mitigations to be maintained separately
	from the core system model. The paper, supported by a \textsc{UML}-based
	modeling tool, describes an application to two case studies, providing
	evidence that the technique can support red-teaming of security requirements
	forn realistic systems.},
  comment = {interaction diagram, model weaving, use case},
  doi = {http://doi.acm.org/10.1145/1368088.1368106},
  file = {:./process/interesse/interaction diagrams/4814123.pdf:PDF},
  isbn = {978-1-60558-079-1},
  keywords = {Misuse cases, Scenarios, Early Aspects},
  location = {Leipzig, Germany},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@BOOK{330775,
  title = {Experimentation in software engineering: an introduction},
  publisher = {Kluwer Academic Publishers},
  year = {2000},
  author = {Wohlin, Claes and Runeson, Per and H\"{o}st, Martin and Ohlsson,
	Magnus C. and Regnell, Bj\"{o}orn and Wessl\'{e}n, Anders},
  address = {Norwell, MA, USA},
  isbn = {0-7923-8682-5}
}

@INPROCEEDINGS{Xu2007a,
  author = {Xu, Dianxiang and He, Xudong},
  title = {Generation of test requirements from aspectual use cases},
  booktitle = {WTAOP '07: Proceedings of the 3rd workshop on Testing aspect-oriented
	programs},
  year = {2007},
  pages = {17--22},
  address = {New York, NY, USA},
  publisher = {ACM},
  abstract = {To effectively uncover aspect defects, system (or subsystem) testing
	is of importance because aspects crosscut multiple system components.
	This paper presents an approach for generating system test requirements
	from aspect-oriented use cases. Central to this approach is the formalization
	of a testable system model from aspect-oriented use cases. We explicitly
	capture various constraints among base and aspectual use cases. Specifically,
	we transform aspect-oriented use case diagrams and descriptions into
	aspect-oriented Petri nets. This makes it possible to generate meaningful
	use case sequences with respect to various coverage criteria (such
	as use case coverage, transition coverage and state coverage). When
	scenario tests for individual use cases are available, they can be
	composed into system tests according to the generated use case sequences.},
  comment = {use case, test debug},
  doi = {http://doi.acm.org/10.1145/1229384.1229388},
  file = {:./process/interesse/requirements usecase/p17-xu.pdf:PDF},
  isbn = {1-59593-663-9},
  location = {Vancouver, British Columbia, Canada},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Xu2009,
  author = {Yang Xu and Han Huang},
  title = {A Petri Net-Based Model for Aspect-Oriented Web Service Composition},
  booktitle = {Proc. Int. Conf. Management and Service Science MASS '09},
  year = {2009},
  pages = {1--4},
  abstract = {Aspect-oriented programming is an emerging programming paradigm. Now
	the concept of aspect-orientation stretches over other development
	phases and other domains. Many researches have focused on aspect-oriented
	Web service composition domain. However, none of them offers a formal
	foundation for the aspect-oriented service composition. In this paper,
	we propose a Petri net-based algebra for aspect-oriented Web service
	composition. In our model, Web service composition is modeled as
	basic composition net and aspect nets, and then weaving mechanism
	is provided to compose the basic net and aspect nets. The formal
	semantics of the composition operation is expressed in terms of Petri
	nets. Thus, the properties of woven composite service can be verified
	and analyzed based on the underlying Petri net.},
  comment = {formal, model weaving},
  doi = {10.1109/ICMSS.2009.5305764},
  file = {:./process/interesse/formal specifications/5305764.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Xu2007,
  author = {Yang Xu and Shengqun Tang and Youwei Xu and Zukai Tang},
  title = {Towards Aspect Oriented Web Service Composition with \textsc{UML}},
  booktitle = {Proc. 6th IEEE/ACIS Int. Conf. Computer and Information Science ICIS
	2007},
  year = {2007},
  pages = {279--284},
  abstract = {The greater value is derived from assembling <span class='snippet'>web</span>
	<span class='snippet'>services</span> into more powerful composite
	<span class='snippet'>web</span> <span class='snippet'>services</span>
	than in accessing a single <span class='snippet'>web</span> <span
	class='snippet'>service</span>. Now some specifications related to
	<span class='snippet'>composition</span> have been proposed, such
	as BPEL. However, current composite specifications suffer some weaknesses:
	(1) The current composite specifications cannot support dynamic adaptation
	of <span class='snippet'>composition</span>; (2) The current composite
	specifications also cannot explicitly modularize concerns that cut
	across the <span class='snippet'>composition</span> boundaries; (3)
	The <span class='snippet'>compositions</span> described by these
	specifications, lacking a standardized visual representation, are
	not easy to be read for human engineers. Although some approaches
	have been proposed to address these problems, no complete solution
	has been found yet. This paper presents a modeling approach for <span
	class='snippet'>aspect</span> <span class='snippet'>oriented</span>
	<span class='snippet'>web</span> <span class='snippet'>service</span>
	<span class='snippet'>composition</span> <span class='snippet'>with</span>
	<span class='snippet'>\textsc{UML}</span>. We first use <span class='snippet'>\textsc{UML}</span>
	to model the basic <span class='snippet'>Web</span> <span class='snippet'>service</span>
	<span class='snippet'>composition</span> for addressing (3). Then
	we design the <span class='snippet'>aspects</span> for "pluggable"
	behaviors <span class='snippet'>with</span> <span class='snippet'>\textsc{UML}</span>
	to address the problem (1) and (2) and bind the <span class='snippet'>aspects</span>
	into the basic model to get the complete model.},
  comment = {class diagram, model weaving},
  doi = {10.1109/ICIS.2007.185},
  file = {:./process/interesse/class diagrams/4276395.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{zakaria,
  author = {Zakaria, A.A and Hosny H. and Zeid, A. A},
  title = {\textsc{UML} Extension for Modelling Aspect-Oriented Systems},
  booktitle = {Proceedings of Workshop of Aspect Oriented Modeling with \textsc{UML}
	of Aspect Oriented Software Development Conference (AOSD)},
  year = {2002},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.21}
}

@ARTICLE{zanon,
  author = {Zanon, I. and Camargo, Valter Vieira and Penteado, Rosângela Ap Delosso},
  title = {Reestructuring an Application Framework with a Persistence Crosscutting
	Framework},
  journal = {INFOCOMP},
  year = {2010},
  volume = {1},
  pages = {9-16},
  owner = {thiago},
  timestamp = {2011.02.07}
}

@ARTICLE{Zdun2004,
  author = {Zdun, U.},
  title = {Pattern language for the design of aspect languages and aspect composition
	frameworks},
  journal = {IEE Proceedings -Software},
  year = {2004},
  volume = {151},
  pages = {67--83},
  number = {2},
  abstract = {Aspects avoid tangled solutions for crosscutting design concerns.
	Unfortunately there are various reasons why it may be hard to use
	an aspect language or aspect composition framework as a solution,
	even though developers are faced with crosscutting design concerns
	or tangled code structures. For instance, certain limitations of
	specific aspect composition frameworks might hinder the use of aspects.
	Or because of particular project requirements, such as constraints
	for the programming language or limitations of performance and memory,
	developers are not able to use an existing aspect composition framework.
	In such cases, developers would benefit from better understanding
	existing aspect composition frameworks. This would help developers
	to customise existing techniques or implement (simple) aspect composition
	frameworks from scratch. For these purposes, a pattern language is
	presented in the paper for tracing and manipulating software structures
	and dependencies, with an explanation of different, existing aspect
	composition frameworks as sequences through this pattern language.
	Alternative designs, common design tradeoffs, and design decisions
	for implementing aspect composition frameworks, are also evaluated.},
  comment = {formal},
  doi = {10.1049/ip-sen:20040082},
  file = {:./process/interesse/formal specifications/1301262.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{Zhang2009,
  author = {Defen Zhang and Shixian Li and Xianming Liu},
  title = {An Approach for Model Composition and Verification},
  booktitle = {Proc. Fifth Int. Joint Conf. INC, IMS and IDC NCM '09},
  year = {2009},
  pages = {1102--1107},
  abstract = {<span class='snippet'>Model</span> <span class='snippet'>composition</span>
	is frequently used during large software development in MDE (<span
	class='snippet'>Model</span> Driven Engineering). The consistency
	of the composed <span class='snippet'>model</span> is quite essential
	to <span class='snippet'>model</span> <span class='snippet'>composition</span>.
	This paper presents a weaving-based <span class='snippet'>model</span>
	<span class='snippet'>composition</span> framework (WMCF) <span class='snippet'>and</span>
	then gives a prototype implementation of the framework using Alloy
	language. <span class='snippet'>Models</span> are converted into
	Alloy codes <span class='snippet'>and</span> <span class='snippet'>model</span>
	<span class='snippet'>composition</span> is verified by the Alloy
	Analyzer.},
  comment = {class diagram, formal, model weaving},
  doi = {10.1109/NCM.2009.271},
  file = {:./process/interesse/class diagrams/5331768.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Zhang2009a,
  author = {Jingjun Zhang and Yuejuan Chen and Guangyuan Liu and Hui Li},
  title = {Using Sequence Diagram to Support Aspect-Oriented Programming in
	MDA},
  booktitle = {Proc. Int. Conf. Intelligent Human-Machine Systems and Cybernetics
	IHMSC '09},
  year = {2009},
  volume = {1},
  pages = {359--362},
  abstract = {Model-driven development (MDD) aims to shift the focus of software
	development activity from coding to modeling. However, managing relationships
	and specifying transformations between models at various levels of
	abstraction are complex tasks. System models tangled with concerns
	such as security make it difficult to develop complex systems and
	specify model transformations. Aspect-oriented programming (AOP)
	is an emerging software engineering paradigm that improves separation
	of cross-cutting concerns as aspect in a program. At present, the
	AOP paradigm has expanded to all the lifecycle of the software development,
	as a result, aspect-oriented software development (AOSD) is becoming
	a new technique, which has an important step of modeling the aspects.
	We present, in this paper, a sequence diagram describes the aspectual
	sequence model based on the unified modeling language (\textsc{UML})
	to identify the cross-cutting concerns in the framework of model-driven
	architecture (MDA), and using a mature language AspectJ to write
	aspect codes.},
  comment = {class diagram, interaction diagram},
  doi = {10.1109/IHMSC.2009.98},
  file = {:./process/interesse/class diagrams/5336136.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.06}
}

@INPROCEEDINGS{Zheng2010,
  author = {Xiaojuan Zheng and Xiaomei Liu and Shulin Liu},
  title = {Use Case and Non-functional Scenario Template-Based Approach to Identify
	Aspects},
  booktitle = {Proc. Second Int Computer Engineering and Applications (ICCEA) Conf},
  year = {2010},
  volume = {2},
  pages = {89--93},
  abstract = {Use cases are widely used to describe requirements to be validated
	by users and used by builders to drive the software development process.
	However, use cases are only used to define functional requirements,
	leaving out global properties that affect the whole or part of the
	system. Furthermore, the crosscutting nature of some requirements
	is not handled. This approach is based on use cases and we describe
	and map non-functional requirements into function and architectures
	through non-functional scenario template. It not only improves modularity
	in the requirements which make it possible to begin tackling the
	problem of tangling, scattering of the requirement as early as in
	requirement analysis phrase, but also improves traceability from
	requirement analysis level to implement level, so it achieves a smooth
	transition between the system analysis and the design.},
  doi = {10.1109/ICCEA.2010.174},
  file = {:./process/interesse/requirements usecase/5445616.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Zhou2008,
  author = {Yi Zhou and Guohua Lei and Ping Li and Leilei Kong},
  title = {Realizing extension use cases with AOP},
  booktitle = {Proc. IEEE Int. Symp. IT in Medicine and Education ITME 2008},
  year = {2008},
  pages = {1040--1044},
  abstract = {The extension use case adds additional behavior to a base use case
	without changing it. We had no mainstream programming language supporting
	the implementation of extensions as we now get with Aspect-Oriented
	Programming. Aspect-Oriented Programming provides the ability to
	modularize and weave the representation of crosscutting concerns.
	This paper focuses on the extension of \textsc{UML} for modeling
	and realizing the use case extension relationship which AOP addresses.
	An example of modeling and implementing extension use case with AOP
	is presented.},
  comment = {use case},
  doi = {10.1109/ITME.2008.4744028},
  file = {:./process/interesse/requirements usecase/4744028.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.10}
}

@INPROCEEDINGS{Zhu2009,
  author = {Liming Zhu and Yan Liu},
  title = {Model Driven Development with non-functional aspects},
  booktitle = {Proc. ICSE Workshop Aspect-Oriented Requirements Engineering and
	Architecture Design EA '09},
  year = {2009},
  pages = {49--54},
  abstract = {Model Driven Development (MDD) refers to the systematic use of models
	as primary engineering artifacts throughout a software development
	life cycle. In recently years, MDD has been increasingly employed
	to guide development with a focus on system modeling, code generation
	from models and white-box analysis of models. However, compositional
	system analysis regarding early Non-Functional Aspects/Properties
	(NFP) remains difficult. In this paper, we critically review the
	state-of-the-art of MDD in the context of non-functional aspects
	and shed some lights on the following two questions: 1) How to model
	Non-Functional Aspect/Property (NFP). The focus is to understand
	the different subtypes of a non-functional aspects and its compositional
	and emergent nature. 2) How models can be used for analyzing Non-functional
	Aspect/Property (NFP). This focuses on the analysis models in the
	form of reasoning frameworks (both qualitative and quantitative)
	behind each non-functional aspect.},
  comment = {metamodel, use case},
  doi = {10.1109/EA.2009.5071584},
  file = {:./process/interesse/metamodel profiles/5071584.pdf:PDF},
  owner = {Thiago Gottardi},
  timestamp = {2010.08.09}
}

@INPROCEEDINGS{101322,
    AUTHOR="Rafael Durelli and Thiago Gottardi and Valter Camargo",
    TITLE="CrossFIRE: An Infrastructure for Storing Crosscutting Framework Families and Supporting their Model-Based Reuse",
    BOOKTITLE="CBSoft2012 - Tools 2012 ",
    ADDRESS="",
    DAYS="23-28",
    MONTH="September",
    YEAR="2012",
    ABSTRACT="A Crosscutting Framework (CF) is an abstract design of a single Crosscutting Concern (CC) which was designed for being reused. A Crosscutting Framework Family (CFF) is a set of features whose composition results in a CF. As CFs encapsulate just one CC, their usefulness occurs when there are a number of them available for being reused. However, despite the number of CFs proposed in the last years, there is no a suitable repository in which they can be uploaded and made available. Furthermore, most of them employ white-box strategies in their reuse process, requiring significant technical knowledge to reuse them. To cope with these problems, we put forward the CrossFIRE, which is an infrastructure that allows to store, search, view and reuse CFs. Thus, domain engineers can make their CFFs available and the application engineers can search this repository, select the CFF features and reuse them in a model-based fashion.",
    KEYWORDS="Desenvolvimento de software orientado a aspectos; Desenvolvimento Dirigido por Modelos; Reutilização de Software",
}



@comment{jabref-meta: selector_publisher:}

@comment{jabref-meta: selector_author:}

@comment{jabref-meta: selector_journal:}

@comment{jabref-meta: selector_keywords:activity diagram;}

