 In this section, we briefly show an example of how to use our models and generate code in order to reuse a CF.
 %In this section, a member of the ``persistence'' CF is instanced by using the models that we have proposed. 
%
%The engineer has to look in the repository and determine whether there are some CFF(s) which can be reused, to make easier and faster the development of the base application. In this case the ``persistence'' CFF has been chosen. In order to assist this activity, ProLine-RM provides a graphical user interface in which depicts all CFFs that have been uploaded by the engineers. Next, ProLine-RM transfers the feature model belonging to the ``persistence'' CFF from the remote repository to the application engineer computer.
%
 To reuse the ``persistence'' CF, the application engineer must specify explicitly which features will be used in the base application. 
 This is important because usually the CFs have a great deal of features that probably will not be used in the application base. 
 Therefore, we developed an environment to facilitate the feature selection in order to instantiate a member.
 This environment also provides a way to validate the combinations of features.
 Further details of this environment are out of the scope of this paper.

%features can be chosen by the application engineer. The ``configuration file'' related to the ``persistence'' CFF is shown in Figure~\ref{fig:AllCFFAvailable} (ii). Moreover, it is interesting to provide a way to validate if the selected features match a valid combination for the instantiation of a member of the CFF, since, certain combinations of features may not lead to useful variants (e.g., in our example the ``persistence'' CFF only a single database connection may be used). ProLine-RM supports this validation automatically. As shown in Figure~\ref{fig:AllCFFAvailable}(ii) once the engineer has chosen the features represented by ``+'', the resulting variant and constraints are generated automatically which are represented by ``-''.

% The repository server uses the ``configuration file'' to instantiate a specific CF from the available CFFs. This process allows the application engineer to only receive the necessary framework units (e.g., classes, aspects, and packages)  for the application under development. The RM is also instantiated, only containing the definitions related to the chosen features. The RM related to the ``persistence'' CFF is shown in the Figure~\ref{fig:AllCFFAvailable} (iii). Therefore, the creation of a base application design compatible to the framework is possible, and after the design is complete, the form should be filled. The methods found in the base application are referenced to fill the information required by the framework. 

 In Figure~\ref{fig:model_editor}, there is our model editor. By using this editor, it is possible to model RRMs and RMs. In this example there is a RM related to the ``persistence'' CF being completed with information of a base application. The pointcuts ``Connection Opening'', ``Connection Closing'' and ``Transaction Methods'' are intended to capture specific join-points of the base application, e.g. names of methods of the base application that will be affected by the framework. The first two represent, respectively, method executions that should occur after a database connection is open or before it is closed. The last pointcut represents methods that encapsulate data transactions.

The ``Persistent Objects'' is a type extension definition, then, it may represent either a class or an interface that should be extended or implemented by a base class or interface. In this case, the application engineer must supply names of classes (or their super-types) which represent objects that should be persisted on the database.


%The following elements represent framework variabilities that should be chosen or defined by the application developer. ``Value definitions'' represent values that should be informed to the framework and ``Options'' represent predefined options that should be chosen by the application engineer. The application engineer may define the selected option or options by setting true or false for each option.

%``Connection Pools Number'' is an integer value which is used to inform the framework how many database connections should be kept open by the connection pool. 
``Dirty Objects Controller'' is a boolean value which is used to define if the dirty objects controller should be active. This is used to update the database records automatically as soon as any attribute belonging to a persistent object is changed by a set method. ``Database Username'' and ``Database Password'' are string values that are used to define the username and password needed to log into the database system. ``Database Connection String'' is a string value which should be used to specify the database connection details, i.e., the database system address, port and database name.

%``Database connection driver'' is an option group, representing possible connections that may be chosen by the application engineer, either native driver connection or via ODBC. ``Database System'' is an option group which represents the implementation of the database management system. The application engineer should select the database system which the application should connect to. ``Obliviousness level'' is an option group that represents the level of obliviousness found on the base application classes. ``Total obliviousness'' means that the base application does not need to call any method in order to save the persistent objects, however, when the ``Partial obliviousness'' is set, the base application must call an method inherited by persistent objects.

% There are three referenced ``Persistent Objects''; their classes will receive methods and crosscutting behavior in order to implement the persistence concern.

After completing the Reuse Model, it is possible to execute a code generator, which is a model to code transformation tool capable of generating reuse code in AspectJ, illustrated on Figure~\ref{fig:reuse_code}, which allows coupling the base application to the framework in a separate module. The final software is the composition of base application code, reuse code for each reused framework and the code of reused frameworks.

\begin{figure}[!h]
\centering
\includegraphics[width=0.48\textwidth,
height=0.35\textheight
]{figuras/reuse_code.\figext}
\caption{Reuse Code Fragment\label{fig:reuse_code}}
\end{figure}

The first code of Figure~\ref{fig:reuse_code} contains a new aspect which was created by generating code for the three pointcuts of the RM. This aspect extends an abstract aspect of the framework with the supplied information. In the second code, the type extension is implemented, then the classes written in the RM, ``Customer'', ``Resource'' and ``Order'', receive an interface of the framework, which is used to apply crosscutting behavior. In the third code, the value definitions are set by overriding methods of the framework.% The interface ``SelectedManager'' is implemented by classes which extend the selected database connection. However it is not visible in this paper, due to size limitations.


